// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countProfilesInUserPortfolio = `-- name: CountProfilesInUserPortfolio :one
SELECT COUNT(portfolio_id)
FROM hamonix_business.u_portfolio
WHERE user_id = $1
`

func (q *Queries) CountProfilesInUserPortfolio(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, countProfilesInUserPortfolio, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUserPortfolio = `-- name: CreateUserPortfolio :one
INSERT INTO hamonix_business.u_portfolio (
  user_id,
  portfolio_id
) VALUES (
  $1, $2
) RETURNING id, user_id, portfolio_id
`

type CreateUserPortfolioParams struct {
	UserID      string      `json:"user_id"`
	PortfolioID pgtype.Text `json:"portfolio_id"`
}

func (q *Queries) CreateUserPortfolio(ctx context.Context, arg CreateUserPortfolioParams) (HamonixBusinessUPortfolio, error) {
	row := q.db.QueryRow(ctx, createUserPortfolio, arg.UserID, arg.PortfolioID)
	var i HamonixBusinessUPortfolio
	err := row.Scan(&i.ID, &i.UserID, &i.PortfolioID)
	return i, err
}

const getUPortfolioByUserId = `-- name: GetUPortfolioByUserId :many
SELECT portfolio_id FROM hamonix_business.u_portfolio
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type GetUPortfolioByUserIdParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetUPortfolioByUserId(ctx context.Context, arg GetUPortfolioByUserIdParams) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getUPortfolioByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.Text{}
	for rows.Next() {
		var portfolio_id pgtype.Text
		if err := rows.Scan(&portfolio_id); err != nil {
			return nil, err
		}
		items = append(items, portfolio_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
