// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: portfolio_profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAsset = `-- name: CreateAsset :one
INSERT INTO hamonix_business.assets (
  portfolio_id,
  ticker_id,
  price,
  allocation
) VALUES (
  $1, $2, $3, $4
) RETURNING id, portfolio_id, ticker_id, price, allocation
`

type CreateAssetParams struct {
	PortfolioID string  `json:"portfolio_id"`
	TickerID    int32   `json:"ticker_id"`
	Price       float64 `json:"price"`
	Allocation  float64 `json:"allocation"`
}

func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (HamonixBusinessAsset, error) {
	row := q.db.QueryRow(ctx, createAsset,
		arg.PortfolioID,
		arg.TickerID,
		arg.Price,
		arg.Allocation,
	)
	var i HamonixBusinessAsset
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.TickerID,
		&i.Price,
		&i.Allocation,
	)
	return i, err
}

const createEqAccount = `-- name: CreateEqAccount :one
INSERT INTO hamonix_business.eq_accounts (
  id,
  advisor_id,
  code
) VALUES (
  $1, $2, $3
) RETURNING id, advisor_id, code
`

type CreateEqAccountParams struct {
	ID        string      `json:"id"`
	AdvisorID pgtype.Text `json:"advisor_id"`
	Code      string      `json:"code"`
}

func (q *Queries) CreateEqAccount(ctx context.Context, arg CreateEqAccountParams) (HamonixBusinessEqAccount, error) {
	row := q.db.QueryRow(ctx, createEqAccount, arg.ID, arg.AdvisorID, arg.Code)
	var i HamonixBusinessEqAccount
	err := row.Scan(&i.ID, &i.AdvisorID, &i.Code)
	return i, err
}

const createEqAdvisor = `-- name: CreateEqAdvisor :one
INSERT INTO hamonix_business.eq_advisors (
  id,
  code,
  description
) VALUES (
  $1, $2, $3
) RETURNING id, code, description
`

type CreateEqAdvisorParams struct {
	ID          string      `json:"id"`
	Code        pgtype.Text `json:"code"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateEqAdvisor(ctx context.Context, arg CreateEqAdvisorParams) (HamonixBusinessEqAdvisor, error) {
	row := q.db.QueryRow(ctx, createEqAdvisor, arg.ID, arg.Code, arg.Description)
	var i HamonixBusinessEqAdvisor
	err := row.Scan(&i.ID, &i.Code, &i.Description)
	return i, err
}

const createEqBackoffice = `-- name: CreateEqBackoffice :one
INSERT INTO hamonix_business.eq_backoffices (
  id,
  whitelable_id,
  name,
  description
) VALUES (
  $1, $2, $3, $4
) RETURNING id, whitelable_id, name, description
`

type CreateEqBackofficeParams struct {
	ID           string      `json:"id"`
	WhitelableID pgtype.Text `json:"whitelable_id"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
}

func (q *Queries) CreateEqBackoffice(ctx context.Context, arg CreateEqBackofficeParams) (HamonixBusinessEqBackoffice, error) {
	row := q.db.QueryRow(ctx, createEqBackoffice,
		arg.ID,
		arg.WhitelableID,
		arg.Name,
		arg.Description,
	)
	var i HamonixBusinessEqBackoffice
	err := row.Scan(
		&i.ID,
		&i.WhitelableID,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const createEqBranch = `-- name: CreateEqBranch :one
INSERT INTO hamonix_business.eq_branchs (
  id,
  code
) VALUES (
  $1, $2
) RETURNING id, code, description
`

type CreateEqBranchParams struct {
	ID   string `json:"id"`
	Code string `json:"code"`
}

func (q *Queries) CreateEqBranch(ctx context.Context, arg CreateEqBranchParams) (HamonixBusinessEqBranch, error) {
	row := q.db.QueryRow(ctx, createEqBranch, arg.ID, arg.Code)
	var i HamonixBusinessEqBranch
	err := row.Scan(&i.ID, &i.Code, &i.Description)
	return i, err
}

const createEqOrganization = `-- name: CreateEqOrganization :one
INSERT INTO hamonix_business.eq_organizations (
  id,
  backoffice_id,
  code,
  description
) VALUES (
  $1, $2, $3, $4
) RETURNING id, backoffice_id, code, description
`

type CreateEqOrganizationParams struct {
	ID           string      `json:"id"`
	BackofficeID pgtype.Text `json:"backoffice_id"`
	Code         string      `json:"code"`
	Description  pgtype.Text `json:"description"`
}

func (q *Queries) CreateEqOrganization(ctx context.Context, arg CreateEqOrganizationParams) (HamonixBusinessEqOrganization, error) {
	row := q.db.QueryRow(ctx, createEqOrganization,
		arg.ID,
		arg.BackofficeID,
		arg.Code,
		arg.Description,
	)
	var i HamonixBusinessEqOrganization
	err := row.Scan(
		&i.ID,
		&i.BackofficeID,
		&i.Code,
		&i.Description,
	)
	return i, err
}

const createEqWhitelable = `-- name: CreateEqWhitelable :one
INSERT INTO hamonix_business.eq_whitelables (
  id,
  name,
  url,
  description
) VALUES (
  $1, $2, $3, $4
) RETURNING id, name, url, description
`

type CreateEqWhitelableParams struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Url         string      `json:"url"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateEqWhitelable(ctx context.Context, arg CreateEqWhitelableParams) (HamonixBusinessEqWhitelable, error) {
	row := q.db.QueryRow(ctx, createEqWhitelable,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.Description,
	)
	var i HamonixBusinessEqWhitelable
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Description,
	)
	return i, err
}

const createPAdvisor = `-- name: CreatePAdvisor :one
INSERT INTO hamonix_business.p_advisors (
  portfolio_id,
  advisor_id
) VALUES (
  $1, $2
) RETURNING portfolio_id, advisor_id
`

type CreatePAdvisorParams struct {
	PortfolioID string      `json:"portfolio_id"`
	AdvisorID   pgtype.Text `json:"advisor_id"`
}

func (q *Queries) CreatePAdvisor(ctx context.Context, arg CreatePAdvisorParams) (HamonixBusinessPAdvisor, error) {
	row := q.db.QueryRow(ctx, createPAdvisor, arg.PortfolioID, arg.AdvisorID)
	var i HamonixBusinessPAdvisor
	err := row.Scan(&i.PortfolioID, &i.AdvisorID)
	return i, err
}

const createPBranche = `-- name: CreatePBranche :one
INSERT INTO hamonix_business.p_branches (
  portfolio_id,
  branch_id
) VALUES (
  $1, $2
) RETURNING portfolio_id, branch_id
`

type CreatePBrancheParams struct {
	PortfolioID string      `json:"portfolio_id"`
	BranchID    pgtype.Text `json:"branch_id"`
}

func (q *Queries) CreatePBranche(ctx context.Context, arg CreatePBrancheParams) (HamonixBusinessPBranch, error) {
	row := q.db.QueryRow(ctx, createPBranche, arg.PortfolioID, arg.BranchID)
	var i HamonixBusinessPBranch
	err := row.Scan(&i.PortfolioID, &i.BranchID)
	return i, err
}

const createPCategory = `-- name: CreatePCategory :one
INSERT INTO hamonix_business.p_categories (
  portfolio_id,
  category_id
) VALUES (
  $1, $2
) RETURNING portfolio_id, category_id
`

type CreatePCategoryParams struct {
	PortfolioID string      `json:"portfolio_id"`
	CategoryID  pgtype.Text `json:"category_id"`
}

func (q *Queries) CreatePCategory(ctx context.Context, arg CreatePCategoryParams) (HamonixBusinessPCategory, error) {
	row := q.db.QueryRow(ctx, createPCategory, arg.PortfolioID, arg.CategoryID)
	var i HamonixBusinessPCategory
	err := row.Scan(&i.PortfolioID, &i.CategoryID)
	return i, err
}

const createPOrganization = `-- name: CreatePOrganization :one
INSERT INTO hamonix_business.p_organizations (
  portfolio_id,
  organization_id
) VALUES (
  $1, $2
) RETURNING portfolio_id, organization_id
`

type CreatePOrganizationParams struct {
	PortfolioID    string      `json:"portfolio_id"`
	OrganizationID pgtype.Text `json:"organization_id"`
}

func (q *Queries) CreatePOrganization(ctx context.Context, arg CreatePOrganizationParams) (HamonixBusinessPOrganization, error) {
	row := q.db.QueryRow(ctx, createPOrganization, arg.PortfolioID, arg.OrganizationID)
	var i HamonixBusinessPOrganization
	err := row.Scan(&i.PortfolioID, &i.OrganizationID)
	return i, err
}

const createPortfolio = `-- name: CreatePortfolio :one
INSERT INTO hamonix_business.portfolios (
  id,
  name,
  privacy
) VALUES (
  $1, $2, $3
) RETURNING id, name, privacy, created_at, updated_at
`

type CreatePortfolioParams struct {
	ID      string           `json:"id"`
	Name    string           `json:"name"`
	Privacy PortfolioPrivacy `json:"privacy"`
}

func (q *Queries) CreatePortfolio(ctx context.Context, arg CreatePortfolioParams) (HamonixBusinessPortfolio, error) {
	row := q.db.QueryRow(ctx, createPortfolio, arg.ID, arg.Name, arg.Privacy)
	var i HamonixBusinessPortfolio
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Privacy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPortfolioCategory = `-- name: CreatePortfolioCategory :one
INSERT INTO hamonix_business.portfolio_categories (
  name,
  description
) VALUES (
  $1, $2
) RETURNING id, name, description, created_at, updated_at
`

type CreatePortfolioCategoryParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreatePortfolioCategory(ctx context.Context, arg CreatePortfolioCategoryParams) (HamonixBusinessPortfolioCategory, error) {
	row := q.db.QueryRow(ctx, createPortfolioCategory, arg.Name, arg.Description)
	var i HamonixBusinessPortfolioCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTickerPrice = `-- name: CreateTickerPrice :one
INSERT INTO hamonix_business.ticker_prices (
  ticker_id,
  open,
  low,
  close,
  date
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING ticker_id, open, high, low, close, date
`

type CreateTickerPriceParams struct {
	TickerID int64       `json:"ticker_id"`
	Open     float64     `json:"open"`
	Low      float64     `json:"low"`
	Close    float64     `json:"close"`
	Date     pgtype.Date `json:"date"`
}

func (q *Queries) CreateTickerPrice(ctx context.Context, arg CreateTickerPriceParams) (HamonixBusinessTickerPrice, error) {
	row := q.db.QueryRow(ctx, createTickerPrice,
		arg.TickerID,
		arg.Open,
		arg.Low,
		arg.Close,
		arg.Date,
	)
	var i HamonixBusinessTickerPrice
	err := row.Scan(
		&i.TickerID,
		&i.Open,
		&i.High,
		&i.Low,
		&i.Close,
		&i.Date,
	)
	return i, err
}
