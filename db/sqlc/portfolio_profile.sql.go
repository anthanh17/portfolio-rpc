// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: portfolio_profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAsset = `-- name: CreateAsset :one
INSERT INTO hamonix_business.assets (
  portfolio_id,
  ticker_id,
  price,
  allocation
) VALUES (
  $1, $2, $3, $4
) RETURNING id, portfolio_id, ticker_id, price, allocation
`

type CreateAssetParams struct {
	PortfolioID string  `json:"portfolio_id"`
	TickerID    int32   `json:"ticker_id"`
	Price       float64 `json:"price"`
	Allocation  float64 `json:"allocation"`
}

func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (HamonixBusinessAsset, error) {
	row := q.db.QueryRow(ctx, createAsset,
		arg.PortfolioID,
		arg.TickerID,
		arg.Price,
		arg.Allocation,
	)
	var i HamonixBusinessAsset
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.TickerID,
		&i.Price,
		&i.Allocation,
	)
	return i, err
}

const createEqAccount = `-- name: CreateEqAccount :one
INSERT INTO hamonix_business.eq_accounts (
  id,
  advisor_id,
  code
) VALUES (
  $1, $2, $3
) RETURNING id, advisor_id, code
`

type CreateEqAccountParams struct {
	ID        string      `json:"id"`
	AdvisorID pgtype.Text `json:"advisor_id"`
	Code      string      `json:"code"`
}

func (q *Queries) CreateEqAccount(ctx context.Context, arg CreateEqAccountParams) (HamonixBusinessEqAccount, error) {
	row := q.db.QueryRow(ctx, createEqAccount, arg.ID, arg.AdvisorID, arg.Code)
	var i HamonixBusinessEqAccount
	err := row.Scan(&i.ID, &i.AdvisorID, &i.Code)
	return i, err
}

const createEqAdvisor = `-- name: CreateEqAdvisor :one
INSERT INTO hamonix_business.eq_advisors (
  id,
  code,
  description
) VALUES (
  $1, $2, $3
) RETURNING id, code, description
`

type CreateEqAdvisorParams struct {
	ID          string      `json:"id"`
	Code        pgtype.Text `json:"code"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateEqAdvisor(ctx context.Context, arg CreateEqAdvisorParams) (HamonixBusinessEqAdvisor, error) {
	row := q.db.QueryRow(ctx, createEqAdvisor, arg.ID, arg.Code, arg.Description)
	var i HamonixBusinessEqAdvisor
	err := row.Scan(&i.ID, &i.Code, &i.Description)
	return i, err
}

const createEqBackoffice = `-- name: CreateEqBackoffice :one
INSERT INTO hamonix_business.eq_backoffices (
  id,
  whitelable_id,
  name,
  description
) VALUES (
  $1, $2, $3, $4
) RETURNING id, whitelable_id, name, description
`

type CreateEqBackofficeParams struct {
	ID           string      `json:"id"`
	WhitelableID pgtype.Text `json:"whitelable_id"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
}

func (q *Queries) CreateEqBackoffice(ctx context.Context, arg CreateEqBackofficeParams) (HamonixBusinessEqBackoffice, error) {
	row := q.db.QueryRow(ctx, createEqBackoffice,
		arg.ID,
		arg.WhitelableID,
		arg.Name,
		arg.Description,
	)
	var i HamonixBusinessEqBackoffice
	err := row.Scan(
		&i.ID,
		&i.WhitelableID,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const createEqBranch = `-- name: CreateEqBranch :one
INSERT INTO hamonix_business.eq_branchs (
  id,
  code
) VALUES (
  $1, $2
) RETURNING id, code, description
`

type CreateEqBranchParams struct {
	ID   string `json:"id"`
	Code string `json:"code"`
}

func (q *Queries) CreateEqBranch(ctx context.Context, arg CreateEqBranchParams) (HamonixBusinessEqBranch, error) {
	row := q.db.QueryRow(ctx, createEqBranch, arg.ID, arg.Code)
	var i HamonixBusinessEqBranch
	err := row.Scan(&i.ID, &i.Code, &i.Description)
	return i, err
}

const createEqOrganization = `-- name: CreateEqOrganization :one
INSERT INTO hamonix_business.eq_organizations (
  id,
  backoffice_id,
  code,
  description
) VALUES (
  $1, $2, $3, $4
) RETURNING id, backoffice_id, code, description
`

type CreateEqOrganizationParams struct {
	ID           string      `json:"id"`
	BackofficeID pgtype.Text `json:"backoffice_id"`
	Code         string      `json:"code"`
	Description  pgtype.Text `json:"description"`
}

func (q *Queries) CreateEqOrganization(ctx context.Context, arg CreateEqOrganizationParams) (HamonixBusinessEqOrganization, error) {
	row := q.db.QueryRow(ctx, createEqOrganization,
		arg.ID,
		arg.BackofficeID,
		arg.Code,
		arg.Description,
	)
	var i HamonixBusinessEqOrganization
	err := row.Scan(
		&i.ID,
		&i.BackofficeID,
		&i.Code,
		&i.Description,
	)
	return i, err
}

const createEqWhitelable = `-- name: CreateEqWhitelable :one
INSERT INTO hamonix_business.eq_whitelables (
  id,
  name,
  url,
  description
) VALUES (
  $1, $2, $3, $4
) RETURNING id, name, url, description
`

type CreateEqWhitelableParams struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Url         string      `json:"url"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateEqWhitelable(ctx context.Context, arg CreateEqWhitelableParams) (HamonixBusinessEqWhitelable, error) {
	row := q.db.QueryRow(ctx, createEqWhitelable,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.Description,
	)
	var i HamonixBusinessEqWhitelable
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Description,
	)
	return i, err
}

const createPAdvisor = `-- name: CreatePAdvisor :one
INSERT INTO hamonix_business.p_advisors (
  portfolio_id,
  advisor_id
) VALUES (
  $1, $2
) RETURNING portfolio_id, advisor_id
`

type CreatePAdvisorParams struct {
	PortfolioID string      `json:"portfolio_id"`
	AdvisorID   pgtype.Text `json:"advisor_id"`
}

func (q *Queries) CreatePAdvisor(ctx context.Context, arg CreatePAdvisorParams) (HamonixBusinessPAdvisor, error) {
	row := q.db.QueryRow(ctx, createPAdvisor, arg.PortfolioID, arg.AdvisorID)
	var i HamonixBusinessPAdvisor
	err := row.Scan(&i.PortfolioID, &i.AdvisorID)
	return i, err
}

const createPBranch = `-- name: CreatePBranch :one
INSERT INTO hamonix_business.p_branches (
  portfolio_id,
  branch_id
) VALUES (
  $1, $2
) RETURNING portfolio_id, branch_id
`

type CreatePBranchParams struct {
	PortfolioID string      `json:"portfolio_id"`
	BranchID    pgtype.Text `json:"branch_id"`
}

func (q *Queries) CreatePBranch(ctx context.Context, arg CreatePBranchParams) (HamonixBusinessPBranch, error) {
	row := q.db.QueryRow(ctx, createPBranch, arg.PortfolioID, arg.BranchID)
	var i HamonixBusinessPBranch
	err := row.Scan(&i.PortfolioID, &i.BranchID)
	return i, err
}

const createPCategory = `-- name: CreatePCategory :one
INSERT INTO hamonix_business.p_categories (
  portfolio_id,
  category_id
) VALUES (
  $1, $2
) RETURNING portfolio_id, category_id
`

type CreatePCategoryParams struct {
	PortfolioID string      `json:"portfolio_id"`
	CategoryID  pgtype.Text `json:"category_id"`
}

func (q *Queries) CreatePCategory(ctx context.Context, arg CreatePCategoryParams) (HamonixBusinessPCategory, error) {
	row := q.db.QueryRow(ctx, createPCategory, arg.PortfolioID, arg.CategoryID)
	var i HamonixBusinessPCategory
	err := row.Scan(&i.PortfolioID, &i.CategoryID)
	return i, err
}

const createPOrganization = `-- name: CreatePOrganization :one
INSERT INTO hamonix_business.p_organizations (
  portfolio_id,
  organization_id
) VALUES (
  $1, $2
) RETURNING portfolio_id, organization_id
`

type CreatePOrganizationParams struct {
	PortfolioID    string      `json:"portfolio_id"`
	OrganizationID pgtype.Text `json:"organization_id"`
}

func (q *Queries) CreatePOrganization(ctx context.Context, arg CreatePOrganizationParams) (HamonixBusinessPOrganization, error) {
	row := q.db.QueryRow(ctx, createPOrganization, arg.PortfolioID, arg.OrganizationID)
	var i HamonixBusinessPOrganization
	err := row.Scan(&i.PortfolioID, &i.OrganizationID)
	return i, err
}

const createPortfolio = `-- name: CreatePortfolio :one
INSERT INTO hamonix_business.portfolios (
  id,
  name,
  privacy
) VALUES (
  $1, $2, $3
) RETURNING id, name, privacy, created_at, updated_at
`

type CreatePortfolioParams struct {
	ID      string           `json:"id"`
	Name    string           `json:"name"`
	Privacy PortfolioPrivacy `json:"privacy"`
}

func (q *Queries) CreatePortfolio(ctx context.Context, arg CreatePortfolioParams) (HamonixBusinessPortfolio, error) {
	row := q.db.QueryRow(ctx, createPortfolio, arg.ID, arg.Name, arg.Privacy)
	var i HamonixBusinessPortfolio
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Privacy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPortfolioCategory = `-- name: CreatePortfolioCategory :one
INSERT INTO hamonix_business.portfolio_categories (
  name,
  description
) VALUES (
  $1, $2
) RETURNING id, name, description, created_at, updated_at
`

type CreatePortfolioCategoryParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreatePortfolioCategory(ctx context.Context, arg CreatePortfolioCategoryParams) (HamonixBusinessPortfolioCategory, error) {
	row := q.db.QueryRow(ctx, createPortfolioCategory, arg.Name, arg.Description)
	var i HamonixBusinessPortfolioCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTickerPrice = `-- name: CreateTickerPrice :one
INSERT INTO hamonix_business.ticker_prices (
  ticker_id,
  open,
  low,
  close,
  date
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING ticker_id, open, high, low, close, date
`

type CreateTickerPriceParams struct {
	TickerID int64       `json:"ticker_id"`
	Open     float64     `json:"open"`
	Low      float64     `json:"low"`
	Close    float64     `json:"close"`
	Date     pgtype.Date `json:"date"`
}

func (q *Queries) CreateTickerPrice(ctx context.Context, arg CreateTickerPriceParams) (HamonixBusinessTickerPrice, error) {
	row := q.db.QueryRow(ctx, createTickerPrice,
		arg.TickerID,
		arg.Open,
		arg.Low,
		arg.Close,
		arg.Date,
	)
	var i HamonixBusinessTickerPrice
	err := row.Scan(
		&i.TickerID,
		&i.Open,
		&i.High,
		&i.Low,
		&i.Close,
		&i.Date,
	)
	return i, err
}

const deleteAsset = `-- name: DeleteAsset :exec
DELETE FROM hamonix_business.assets
WHERE portfolio_id = $1 AND ticker_id = $2
`

type DeleteAssetParams struct {
	PortfolioID string `json:"portfolio_id"`
	TickerID    int32  `json:"ticker_id"`
}

func (q *Queries) DeleteAsset(ctx context.Context, arg DeleteAssetParams) error {
	_, err := q.db.Exec(ctx, deleteAsset, arg.PortfolioID, arg.TickerID)
	return err
}

const deletePAdvisor = `-- name: DeletePAdvisor :exec
DELETE FROM hamonix_business.p_advisors
WHERE portfolio_id = $1 AND advisor_id = $2
`

type DeletePAdvisorParams struct {
	PortfolioID string      `json:"portfolio_id"`
	AdvisorID   pgtype.Text `json:"advisor_id"`
}

func (q *Queries) DeletePAdvisor(ctx context.Context, arg DeletePAdvisorParams) error {
	_, err := q.db.Exec(ctx, deletePAdvisor, arg.PortfolioID, arg.AdvisorID)
	return err
}

const deletePBranch = `-- name: DeletePBranch :exec
DELETE FROM hamonix_business.p_branches
WHERE portfolio_id = $1 AND branch_id = $2
`

type DeletePBranchParams struct {
	PortfolioID string      `json:"portfolio_id"`
	BranchID    pgtype.Text `json:"branch_id"`
}

func (q *Queries) DeletePBranch(ctx context.Context, arg DeletePBranchParams) error {
	_, err := q.db.Exec(ctx, deletePBranch, arg.PortfolioID, arg.BranchID)
	return err
}

const deletePCategory = `-- name: DeletePCategory :exec
DELETE FROM hamonix_business.p_categories
WHERE portfolio_id = $1 AND category_id = $2
`

type DeletePCategoryParams struct {
	PortfolioID string      `json:"portfolio_id"`
	CategoryID  pgtype.Text `json:"category_id"`
}

func (q *Queries) DeletePCategory(ctx context.Context, arg DeletePCategoryParams) error {
	_, err := q.db.Exec(ctx, deletePCategory, arg.PortfolioID, arg.CategoryID)
	return err
}

const deletePOrganization = `-- name: DeletePOrganization :exec
DELETE FROM hamonix_business.p_organizations
WHERE portfolio_id = $1 AND organization_id = $2
`

type DeletePOrganizationParams struct {
	PortfolioID    string      `json:"portfolio_id"`
	OrganizationID pgtype.Text `json:"organization_id"`
}

func (q *Queries) DeletePOrganization(ctx context.Context, arg DeletePOrganizationParams) error {
	_, err := q.db.Exec(ctx, deletePOrganization, arg.PortfolioID, arg.OrganizationID)
	return err
}

const deletePortfolio = `-- name: DeletePortfolio :exec
DELETE FROM hamonix_business.portfolios
WHERE id = $1
`

func (q *Queries) DeletePortfolio(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deletePortfolio, id)
	return err
}

const deletePortfolioCategory = `-- name: DeletePortfolioCategory :exec
DELETE FROM hamonix_business.portfolio_categories
WHERE id = $1
`

func (q *Queries) DeletePortfolioCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePortfolioCategory, id)
	return err
}

const deleteTickerPrice = `-- name: DeleteTickerPrice :exec
DELETE FROM hamonix_business.ticker_prices
WHERE ticker_id = $1
`

func (q *Queries) DeleteTickerPrice(ctx context.Context, tickerID int64) error {
	_, err := q.db.Exec(ctx, deleteTickerPrice, tickerID)
	return err
}

const getAssetsByPortfolioId = `-- name: GetAssetsByPortfolioId :many
SELECT id, portfolio_id, ticker_id, price, allocation FROM hamonix_business.assets
WHERE portfolio_id = $1
`

func (q *Queries) GetAssetsByPortfolioId(ctx context.Context, portfolioID string) ([]HamonixBusinessAsset, error) {
	rows, err := q.db.Query(ctx, getAssetsByPortfolioId, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HamonixBusinessAsset{}
	for rows.Next() {
		var i HamonixBusinessAsset
		if err := rows.Scan(
			&i.ID,
			&i.PortfolioID,
			&i.TickerID,
			&i.Price,
			&i.Allocation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPAdvisorByPortfolioId = `-- name: GetPAdvisorByPortfolioId :many
SELECT portfolio_id, advisor_id FROM hamonix_business.p_advisors
WHERE portfolio_id = $1
`

func (q *Queries) GetPAdvisorByPortfolioId(ctx context.Context, portfolioID string) ([]HamonixBusinessPAdvisor, error) {
	rows, err := q.db.Query(ctx, getPAdvisorByPortfolioId, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HamonixBusinessPAdvisor{}
	for rows.Next() {
		var i HamonixBusinessPAdvisor
		if err := rows.Scan(&i.PortfolioID, &i.AdvisorID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPBranchByPortfolioId = `-- name: GetPBranchByPortfolioId :many
SELECT portfolio_id, branch_id FROM hamonix_business.p_branches
WHERE portfolio_id = $1
`

func (q *Queries) GetPBranchByPortfolioId(ctx context.Context, portfolioID string) ([]HamonixBusinessPBranch, error) {
	rows, err := q.db.Query(ctx, getPBranchByPortfolioId, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HamonixBusinessPBranch{}
	for rows.Next() {
		var i HamonixBusinessPBranch
		if err := rows.Scan(&i.PortfolioID, &i.BranchID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPCategoryByPortfolioId = `-- name: GetPCategoryByPortfolioId :many
SELECT portfolio_id, category_id FROM hamonix_business.p_categories
WHERE portfolio_id = $1
`

func (q *Queries) GetPCategoryByPortfolioId(ctx context.Context, portfolioID string) ([]HamonixBusinessPCategory, error) {
	rows, err := q.db.Query(ctx, getPCategoryByPortfolioId, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HamonixBusinessPCategory{}
	for rows.Next() {
		var i HamonixBusinessPCategory
		if err := rows.Scan(&i.PortfolioID, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPOrganizationByPortfolioId = `-- name: GetPOrganizationByPortfolioId :many
SELECT portfolio_id, organization_id FROM hamonix_business.p_organizations
WHERE portfolio_id = $1
`

func (q *Queries) GetPOrganizationByPortfolioId(ctx context.Context, portfolioID string) ([]HamonixBusinessPOrganization, error) {
	rows, err := q.db.Query(ctx, getPOrganizationByPortfolioId, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HamonixBusinessPOrganization{}
	for rows.Next() {
		var i HamonixBusinessPOrganization
		if err := rows.Scan(&i.PortfolioID, &i.OrganizationID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAsset = `-- name: UpdateAsset :one
UPDATE hamonix_business.assets
SET
  price = $3,
  allocation = $4
WHERE portfolio_id = $1 AND ticker_id = $2
RETURNING id, portfolio_id, ticker_id, price, allocation
`

type UpdateAssetParams struct {
	PortfolioID string  `json:"portfolio_id"`
	TickerID    int32   `json:"ticker_id"`
	Price       float64 `json:"price"`
	Allocation  float64 `json:"allocation"`
}

func (q *Queries) UpdateAsset(ctx context.Context, arg UpdateAssetParams) (HamonixBusinessAsset, error) {
	row := q.db.QueryRow(ctx, updateAsset,
		arg.PortfolioID,
		arg.TickerID,
		arg.Price,
		arg.Allocation,
	)
	var i HamonixBusinessAsset
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.TickerID,
		&i.Price,
		&i.Allocation,
	)
	return i, err
}

const updateEqAccount = `-- name: UpdateEqAccount :one
UPDATE hamonix_business.eq_accounts
SET
  code = $2
WHERE advisor_id = $1
RETURNING id, advisor_id, code
`

type UpdateEqAccountParams struct {
	AdvisorID pgtype.Text `json:"advisor_id"`
	Code      string      `json:"code"`
}

func (q *Queries) UpdateEqAccount(ctx context.Context, arg UpdateEqAccountParams) (HamonixBusinessEqAccount, error) {
	row := q.db.QueryRow(ctx, updateEqAccount, arg.AdvisorID, arg.Code)
	var i HamonixBusinessEqAccount
	err := row.Scan(&i.ID, &i.AdvisorID, &i.Code)
	return i, err
}

const updateEqAdvisor = `-- name: UpdateEqAdvisor :one
UPDATE hamonix_business.eq_advisors
SET
  code = $2
WHERE id = $1
RETURNING id, code, description
`

type UpdateEqAdvisorParams struct {
	ID   string      `json:"id"`
	Code pgtype.Text `json:"code"`
}

func (q *Queries) UpdateEqAdvisor(ctx context.Context, arg UpdateEqAdvisorParams) (HamonixBusinessEqAdvisor, error) {
	row := q.db.QueryRow(ctx, updateEqAdvisor, arg.ID, arg.Code)
	var i HamonixBusinessEqAdvisor
	err := row.Scan(&i.ID, &i.Code, &i.Description)
	return i, err
}

const updateEqBackoffice = `-- name: UpdateEqBackoffice :one
UPDATE hamonix_business.eq_backoffices
SET
  name = $2,
  description = $3
WHERE whitelable_id = $1
RETURNING id, whitelable_id, name, description
`

type UpdateEqBackofficeParams struct {
	WhitelableID pgtype.Text `json:"whitelable_id"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
}

func (q *Queries) UpdateEqBackoffice(ctx context.Context, arg UpdateEqBackofficeParams) (HamonixBusinessEqBackoffice, error) {
	row := q.db.QueryRow(ctx, updateEqBackoffice, arg.WhitelableID, arg.Name, arg.Description)
	var i HamonixBusinessEqBackoffice
	err := row.Scan(
		&i.ID,
		&i.WhitelableID,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const updateEqBranch = `-- name: UpdateEqBranch :one
UPDATE hamonix_business.eq_branchs
SET
  code = $2
WHERE id = $1
RETURNING id, code, description
`

type UpdateEqBranchParams struct {
	ID   string `json:"id"`
	Code string `json:"code"`
}

func (q *Queries) UpdateEqBranch(ctx context.Context, arg UpdateEqBranchParams) (HamonixBusinessEqBranch, error) {
	row := q.db.QueryRow(ctx, updateEqBranch, arg.ID, arg.Code)
	var i HamonixBusinessEqBranch
	err := row.Scan(&i.ID, &i.Code, &i.Description)
	return i, err
}

const updateEqOrganization = `-- name: UpdateEqOrganization :one
UPDATE hamonix_business.eq_organizations
SET
  code = $2,
  description = $3
WHERE backoffice_id = $1
RETURNING id, backoffice_id, code, description
`

type UpdateEqOrganizationParams struct {
	BackofficeID pgtype.Text `json:"backoffice_id"`
	Code         string      `json:"code"`
	Description  pgtype.Text `json:"description"`
}

func (q *Queries) UpdateEqOrganization(ctx context.Context, arg UpdateEqOrganizationParams) (HamonixBusinessEqOrganization, error) {
	row := q.db.QueryRow(ctx, updateEqOrganization, arg.BackofficeID, arg.Code, arg.Description)
	var i HamonixBusinessEqOrganization
	err := row.Scan(
		&i.ID,
		&i.BackofficeID,
		&i.Code,
		&i.Description,
	)
	return i, err
}

const updateEqWhitelable = `-- name: UpdateEqWhitelable :one
UPDATE hamonix_business.eq_whitelables
SET
  name = $2,
  url = $3,
  description = $4
WHERE id = $1
RETURNING id, name, url, description
`

type UpdateEqWhitelableParams struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Url         string      `json:"url"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateEqWhitelable(ctx context.Context, arg UpdateEqWhitelableParams) (HamonixBusinessEqWhitelable, error) {
	row := q.db.QueryRow(ctx, updateEqWhitelable,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.Description,
	)
	var i HamonixBusinessEqWhitelable
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Description,
	)
	return i, err
}

const updatePAdvisor = `-- name: UpdatePAdvisor :one
UPDATE hamonix_business.p_advisors
SET
  advisor_id = $3
WHERE portfolio_id = $1 AND advisor_id = $2
RETURNING portfolio_id, advisor_id
`

type UpdatePAdvisorParams struct {
	PortfolioID string      `json:"portfolio_id"`
	AdvisorID   pgtype.Text `json:"advisor_id"`
	AdvisorID_2 pgtype.Text `json:"advisor_id_2"`
}

func (q *Queries) UpdatePAdvisor(ctx context.Context, arg UpdatePAdvisorParams) (HamonixBusinessPAdvisor, error) {
	row := q.db.QueryRow(ctx, updatePAdvisor, arg.PortfolioID, arg.AdvisorID, arg.AdvisorID_2)
	var i HamonixBusinessPAdvisor
	err := row.Scan(&i.PortfolioID, &i.AdvisorID)
	return i, err
}

const updatePBranch = `-- name: UpdatePBranch :one
UPDATE hamonix_business.p_branches
SET
  branch_id = $3
WHERE portfolio_id = $1 AND branch_id = $2
RETURNING portfolio_id, branch_id
`

type UpdatePBranchParams struct {
	PortfolioID string      `json:"portfolio_id"`
	BranchID    pgtype.Text `json:"branch_id"`
	BranchID_2  pgtype.Text `json:"branch_id_2"`
}

func (q *Queries) UpdatePBranch(ctx context.Context, arg UpdatePBranchParams) (HamonixBusinessPBranch, error) {
	row := q.db.QueryRow(ctx, updatePBranch, arg.PortfolioID, arg.BranchID, arg.BranchID_2)
	var i HamonixBusinessPBranch
	err := row.Scan(&i.PortfolioID, &i.BranchID)
	return i, err
}

const updatePCategory = `-- name: UpdatePCategory :one
UPDATE hamonix_business.p_categories
SET
  category_id = $3
WHERE portfolio_id = $1 AND category_id = $2
RETURNING portfolio_id, category_id
`

type UpdatePCategoryParams struct {
	PortfolioID  string      `json:"portfolio_id"`
	CategoryID   pgtype.Text `json:"category_id"`
	CategoryID_2 pgtype.Text `json:"category_id_2"`
}

func (q *Queries) UpdatePCategory(ctx context.Context, arg UpdatePCategoryParams) (HamonixBusinessPCategory, error) {
	row := q.db.QueryRow(ctx, updatePCategory, arg.PortfolioID, arg.CategoryID, arg.CategoryID_2)
	var i HamonixBusinessPCategory
	err := row.Scan(&i.PortfolioID, &i.CategoryID)
	return i, err
}

const updatePOrganization = `-- name: UpdatePOrganization :one
UPDATE hamonix_business.p_organizations
SET
  organization_id = $3
WHERE portfolio_id = $1 AND organization_id = $2
RETURNING portfolio_id, organization_id
`

type UpdatePOrganizationParams struct {
	PortfolioID      string      `json:"portfolio_id"`
	OrganizationID   pgtype.Text `json:"organization_id"`
	OrganizationID_2 pgtype.Text `json:"organization_id_2"`
}

func (q *Queries) UpdatePOrganization(ctx context.Context, arg UpdatePOrganizationParams) (HamonixBusinessPOrganization, error) {
	row := q.db.QueryRow(ctx, updatePOrganization, arg.PortfolioID, arg.OrganizationID, arg.OrganizationID_2)
	var i HamonixBusinessPOrganization
	err := row.Scan(&i.PortfolioID, &i.OrganizationID)
	return i, err
}

const updatePortfolio = `-- name: UpdatePortfolio :one
UPDATE hamonix_business.portfolios
SET
  name = $2,
  privacy = $3
WHERE id = $1
RETURNING id, name, privacy, created_at, updated_at
`

type UpdatePortfolioParams struct {
	ID      string           `json:"id"`
	Name    string           `json:"name"`
	Privacy PortfolioPrivacy `json:"privacy"`
}

func (q *Queries) UpdatePortfolio(ctx context.Context, arg UpdatePortfolioParams) (HamonixBusinessPortfolio, error) {
	row := q.db.QueryRow(ctx, updatePortfolio, arg.ID, arg.Name, arg.Privacy)
	var i HamonixBusinessPortfolio
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Privacy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePortfolioCategory = `-- name: UpdatePortfolioCategory :one
UPDATE hamonix_business.portfolio_categories
SET
  name = $2,
  description = $3
WHERE id = $1
RETURNING id, name, description, created_at, updated_at
`

type UpdatePortfolioCategoryParams struct {
	ID          int64       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdatePortfolioCategory(ctx context.Context, arg UpdatePortfolioCategoryParams) (HamonixBusinessPortfolioCategory, error) {
	row := q.db.QueryRow(ctx, updatePortfolioCategory, arg.ID, arg.Name, arg.Description)
	var i HamonixBusinessPortfolioCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTickerPrice = `-- name: UpdateTickerPrice :one
UPDATE hamonix_business.ticker_prices
SET
  open = $2,
  low = $3,
  close = $4,
  date = $5
WHERE ticker_id = $1
RETURNING ticker_id, open, high, low, close, date
`

type UpdateTickerPriceParams struct {
	TickerID int64       `json:"ticker_id"`
	Open     float64     `json:"open"`
	Low      float64     `json:"low"`
	Close    float64     `json:"close"`
	Date     pgtype.Date `json:"date"`
}

func (q *Queries) UpdateTickerPrice(ctx context.Context, arg UpdateTickerPriceParams) (HamonixBusinessTickerPrice, error) {
	row := q.db.QueryRow(ctx, updateTickerPrice,
		arg.TickerID,
		arg.Open,
		arg.Low,
		arg.Close,
		arg.Date,
	)
	var i HamonixBusinessTickerPrice
	err := row.Scan(
		&i.TickerID,
		&i.Open,
		&i.High,
		&i.Low,
		&i.Close,
		&i.Date,
	)
	return i, err
}
