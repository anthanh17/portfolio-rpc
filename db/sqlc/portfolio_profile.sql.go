// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: portfolio_profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAsset = `-- name: CreateAsset :one
INSERT INTO hamonix_business.assets (
  portfolio_id,
  ticker_id,
  price,
  allocation
) VALUES (
  $1, $2, $3, $4
) RETURNING id, portfolio_id, ticker_id, price, allocation
`

type CreateAssetParams struct {
	PortfolioID string  `json:"portfolio_id"`
	TickerID    int32   `json:"ticker_id"`
	Price       float64 `json:"price"`
	Allocation  float64 `json:"allocation"`
}

func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (HamonixBusinessAsset, error) {
	row := q.db.QueryRow(ctx, createAsset,
		arg.PortfolioID,
		arg.TickerID,
		arg.Price,
		arg.Allocation,
	)
	var i HamonixBusinessAsset
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.TickerID,
		&i.Price,
		&i.Allocation,
	)
	return i, err
}

const createPAdvisor = `-- name: CreatePAdvisor :one
INSERT INTO hamonix_business.p_advisors (
  portfolio_id,
  advisor_id
) VALUES (
  $1, $2
) RETURNING id, portfolio_id, advisor_id
`

type CreatePAdvisorParams struct {
	PortfolioID string      `json:"portfolio_id"`
	AdvisorID   pgtype.Text `json:"advisor_id"`
}

func (q *Queries) CreatePAdvisor(ctx context.Context, arg CreatePAdvisorParams) (HamonixBusinessPAdvisor, error) {
	row := q.db.QueryRow(ctx, createPAdvisor, arg.PortfolioID, arg.AdvisorID)
	var i HamonixBusinessPAdvisor
	err := row.Scan(&i.ID, &i.PortfolioID, &i.AdvisorID)
	return i, err
}

const createPBranch = `-- name: CreatePBranch :one
INSERT INTO hamonix_business.p_branches (
  portfolio_id,
  branch_id
) VALUES (
  $1, $2
) RETURNING id, portfolio_id, branch_id
`

type CreatePBranchParams struct {
	PortfolioID string      `json:"portfolio_id"`
	BranchID    pgtype.Text `json:"branch_id"`
}

func (q *Queries) CreatePBranch(ctx context.Context, arg CreatePBranchParams) (HamonixBusinessPBranch, error) {
	row := q.db.QueryRow(ctx, createPBranch, arg.PortfolioID, arg.BranchID)
	var i HamonixBusinessPBranch
	err := row.Scan(&i.ID, &i.PortfolioID, &i.BranchID)
	return i, err
}

const createPCategory = `-- name: CreatePCategory :one
INSERT INTO hamonix_business.p_categories (
  portfolio_id,
  category_id
) VALUES (
  $1, $2
) RETURNING id, portfolio_id, category_id
`

type CreatePCategoryParams struct {
	PortfolioID string      `json:"portfolio_id"`
	CategoryID  pgtype.Text `json:"category_id"`
}

func (q *Queries) CreatePCategory(ctx context.Context, arg CreatePCategoryParams) (HamonixBusinessPCategory, error) {
	row := q.db.QueryRow(ctx, createPCategory, arg.PortfolioID, arg.CategoryID)
	var i HamonixBusinessPCategory
	err := row.Scan(&i.ID, &i.PortfolioID, &i.CategoryID)
	return i, err
}

const createPOrganization = `-- name: CreatePOrganization :one
INSERT INTO hamonix_business.p_organizations (
  portfolio_id,
  organization_id
) VALUES (
  $1, $2
) RETURNING id, portfolio_id, organization_id
`

type CreatePOrganizationParams struct {
	PortfolioID    string      `json:"portfolio_id"`
	OrganizationID pgtype.Text `json:"organization_id"`
}

func (q *Queries) CreatePOrganization(ctx context.Context, arg CreatePOrganizationParams) (HamonixBusinessPOrganization, error) {
	row := q.db.QueryRow(ctx, createPOrganization, arg.PortfolioID, arg.OrganizationID)
	var i HamonixBusinessPOrganization
	err := row.Scan(&i.ID, &i.PortfolioID, &i.OrganizationID)
	return i, err
}

const createPortfolio = `-- name: CreatePortfolio :one
INSERT INTO hamonix_business.portfolios (
  id,
  name,
  privacy,
  author_id
) VALUES (
  $1, $2, $3, $4
) RETURNING id, name, privacy, author_id, created_at, updated_at
`

type CreatePortfolioParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Privacy  string `json:"privacy"`
	AuthorID string `json:"author_id"`
}

func (q *Queries) CreatePortfolio(ctx context.Context, arg CreatePortfolioParams) (HamonixBusinessPortfolio, error) {
	row := q.db.QueryRow(ctx, createPortfolio,
		arg.ID,
		arg.Name,
		arg.Privacy,
		arg.AuthorID,
	)
	var i HamonixBusinessPortfolio
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Privacy,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAsset = `-- name: DeleteAsset :exec
DELETE FROM hamonix_business.assets
WHERE portfolio_id = $1 AND ticker_id = $2
`

type DeleteAssetParams struct {
	PortfolioID string `json:"portfolio_id"`
	TickerID    int32  `json:"ticker_id"`
}

func (q *Queries) DeleteAsset(ctx context.Context, arg DeleteAssetParams) error {
	_, err := q.db.Exec(ctx, deleteAsset, arg.PortfolioID, arg.TickerID)
	return err
}

const deletePAdvisor = `-- name: DeletePAdvisor :exec
DELETE FROM hamonix_business.p_advisors
WHERE portfolio_id = $1 AND advisor_id = $2
`

type DeletePAdvisorParams struct {
	PortfolioID string      `json:"portfolio_id"`
	AdvisorID   pgtype.Text `json:"advisor_id"`
}

func (q *Queries) DeletePAdvisor(ctx context.Context, arg DeletePAdvisorParams) error {
	_, err := q.db.Exec(ctx, deletePAdvisor, arg.PortfolioID, arg.AdvisorID)
	return err
}

const deletePBranch = `-- name: DeletePBranch :exec
DELETE FROM hamonix_business.p_branches
WHERE portfolio_id = $1 AND branch_id = $2
`

type DeletePBranchParams struct {
	PortfolioID string      `json:"portfolio_id"`
	BranchID    pgtype.Text `json:"branch_id"`
}

func (q *Queries) DeletePBranch(ctx context.Context, arg DeletePBranchParams) error {
	_, err := q.db.Exec(ctx, deletePBranch, arg.PortfolioID, arg.BranchID)
	return err
}

const deletePCategory = `-- name: DeletePCategory :exec
DELETE FROM hamonix_business.p_categories
WHERE portfolio_id = $1 AND category_id = $2
`

type DeletePCategoryParams struct {
	PortfolioID string      `json:"portfolio_id"`
	CategoryID  pgtype.Text `json:"category_id"`
}

func (q *Queries) DeletePCategory(ctx context.Context, arg DeletePCategoryParams) error {
	_, err := q.db.Exec(ctx, deletePCategory, arg.PortfolioID, arg.CategoryID)
	return err
}

const deletePOrganization = `-- name: DeletePOrganization :exec
DELETE FROM hamonix_business.p_organizations
WHERE portfolio_id = $1 AND organization_id = $2
`

type DeletePOrganizationParams struct {
	PortfolioID    string      `json:"portfolio_id"`
	OrganizationID pgtype.Text `json:"organization_id"`
}

func (q *Queries) DeletePOrganization(ctx context.Context, arg DeletePOrganizationParams) error {
	_, err := q.db.Exec(ctx, deletePOrganization, arg.PortfolioID, arg.OrganizationID)
	return err
}

const deletePortfolio = `-- name: DeletePortfolio :exec
DELETE FROM hamonix_business.portfolios
WHERE id = $1
`

func (q *Queries) DeletePortfolio(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deletePortfolio, id)
	return err
}

const getAssetsByPortfolioId = `-- name: GetAssetsByPortfolioId :many
SELECT id, portfolio_id, ticker_id, price, allocation FROM hamonix_business.assets
WHERE portfolio_id = $1
`

func (q *Queries) GetAssetsByPortfolioId(ctx context.Context, portfolioID string) ([]HamonixBusinessAsset, error) {
	rows, err := q.db.Query(ctx, getAssetsByPortfolioId, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HamonixBusinessAsset{}
	for rows.Next() {
		var i HamonixBusinessAsset
		if err := rows.Scan(
			&i.ID,
			&i.PortfolioID,
			&i.TickerID,
			&i.Price,
			&i.Allocation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPAdvisorByPortfolioId = `-- name: GetPAdvisorByPortfolioId :many
SELECT id, portfolio_id, advisor_id FROM hamonix_business.p_advisors
WHERE portfolio_id = $1
`

func (q *Queries) GetPAdvisorByPortfolioId(ctx context.Context, portfolioID string) ([]HamonixBusinessPAdvisor, error) {
	rows, err := q.db.Query(ctx, getPAdvisorByPortfolioId, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HamonixBusinessPAdvisor{}
	for rows.Next() {
		var i HamonixBusinessPAdvisor
		if err := rows.Scan(&i.ID, &i.PortfolioID, &i.AdvisorID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPBranchByPortfolioId = `-- name: GetPBranchByPortfolioId :many
SELECT id, portfolio_id, branch_id FROM hamonix_business.p_branches
WHERE portfolio_id = $1
`

func (q *Queries) GetPBranchByPortfolioId(ctx context.Context, portfolioID string) ([]HamonixBusinessPBranch, error) {
	rows, err := q.db.Query(ctx, getPBranchByPortfolioId, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HamonixBusinessPBranch{}
	for rows.Next() {
		var i HamonixBusinessPBranch
		if err := rows.Scan(&i.ID, &i.PortfolioID, &i.BranchID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPCategoryByPortfolioId = `-- name: GetPCategoryByPortfolioId :many
SELECT id, portfolio_id, category_id FROM hamonix_business.p_categories
WHERE portfolio_id = $1
`

func (q *Queries) GetPCategoryByPortfolioId(ctx context.Context, portfolioID string) ([]HamonixBusinessPCategory, error) {
	rows, err := q.db.Query(ctx, getPCategoryByPortfolioId, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HamonixBusinessPCategory{}
	for rows.Next() {
		var i HamonixBusinessPCategory
		if err := rows.Scan(&i.ID, &i.PortfolioID, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPOrganizationByPortfolioId = `-- name: GetPOrganizationByPortfolioId :many
SELECT id, portfolio_id, organization_id FROM hamonix_business.p_organizations
WHERE portfolio_id = $1
`

func (q *Queries) GetPOrganizationByPortfolioId(ctx context.Context, portfolioID string) ([]HamonixBusinessPOrganization, error) {
	rows, err := q.db.Query(ctx, getPOrganizationByPortfolioId, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HamonixBusinessPOrganization{}
	for rows.Next() {
		var i HamonixBusinessPOrganization
		if err := rows.Scan(&i.ID, &i.PortfolioID, &i.OrganizationID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfilesByPortfolioId = `-- name: GetProfilesByPortfolioId :one
SELECT id, name, privacy, author_id, created_at, updated_at FROM hamonix_business.portfolios
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProfilesByPortfolioId(ctx context.Context, id string) (HamonixBusinessPortfolio, error) {
	row := q.db.QueryRow(ctx, getProfilesByPortfolioId, id)
	var i HamonixBusinessPortfolio
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Privacy,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAsset = `-- name: UpdateAsset :one
UPDATE hamonix_business.assets
SET
  price = $3,
  allocation = $4
WHERE portfolio_id = $1 AND ticker_id = $2
RETURNING id, portfolio_id, ticker_id, price, allocation
`

type UpdateAssetParams struct {
	PortfolioID string  `json:"portfolio_id"`
	TickerID    int32   `json:"ticker_id"`
	Price       float64 `json:"price"`
	Allocation  float64 `json:"allocation"`
}

func (q *Queries) UpdateAsset(ctx context.Context, arg UpdateAssetParams) (HamonixBusinessAsset, error) {
	row := q.db.QueryRow(ctx, updateAsset,
		arg.PortfolioID,
		arg.TickerID,
		arg.Price,
		arg.Allocation,
	)
	var i HamonixBusinessAsset
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.TickerID,
		&i.Price,
		&i.Allocation,
	)
	return i, err
}

const updatePAdvisor = `-- name: UpdatePAdvisor :one
UPDATE hamonix_business.p_advisors
SET
  advisor_id = $3
WHERE portfolio_id = $1 AND advisor_id = $2
RETURNING id, portfolio_id, advisor_id
`

type UpdatePAdvisorParams struct {
	PortfolioID string      `json:"portfolio_id"`
	AdvisorID   pgtype.Text `json:"advisor_id"`
	AdvisorID_2 pgtype.Text `json:"advisor_id_2"`
}

func (q *Queries) UpdatePAdvisor(ctx context.Context, arg UpdatePAdvisorParams) (HamonixBusinessPAdvisor, error) {
	row := q.db.QueryRow(ctx, updatePAdvisor, arg.PortfolioID, arg.AdvisorID, arg.AdvisorID_2)
	var i HamonixBusinessPAdvisor
	err := row.Scan(&i.ID, &i.PortfolioID, &i.AdvisorID)
	return i, err
}

const updatePBranch = `-- name: UpdatePBranch :one
UPDATE hamonix_business.p_branches
SET
  branch_id = $3
WHERE portfolio_id = $1 AND branch_id = $2
RETURNING id, portfolio_id, branch_id
`

type UpdatePBranchParams struct {
	PortfolioID string      `json:"portfolio_id"`
	BranchID    pgtype.Text `json:"branch_id"`
	BranchID_2  pgtype.Text `json:"branch_id_2"`
}

func (q *Queries) UpdatePBranch(ctx context.Context, arg UpdatePBranchParams) (HamonixBusinessPBranch, error) {
	row := q.db.QueryRow(ctx, updatePBranch, arg.PortfolioID, arg.BranchID, arg.BranchID_2)
	var i HamonixBusinessPBranch
	err := row.Scan(&i.ID, &i.PortfolioID, &i.BranchID)
	return i, err
}

const updatePCategory = `-- name: UpdatePCategory :one
UPDATE hamonix_business.p_categories
SET
  category_id = $3
WHERE portfolio_id = $1 AND category_id = $2
RETURNING id, portfolio_id, category_id
`

type UpdatePCategoryParams struct {
	PortfolioID  string      `json:"portfolio_id"`
	CategoryID   pgtype.Text `json:"category_id"`
	CategoryID_2 pgtype.Text `json:"category_id_2"`
}

func (q *Queries) UpdatePCategory(ctx context.Context, arg UpdatePCategoryParams) (HamonixBusinessPCategory, error) {
	row := q.db.QueryRow(ctx, updatePCategory, arg.PortfolioID, arg.CategoryID, arg.CategoryID_2)
	var i HamonixBusinessPCategory
	err := row.Scan(&i.ID, &i.PortfolioID, &i.CategoryID)
	return i, err
}

const updatePOrganization = `-- name: UpdatePOrganization :one
UPDATE hamonix_business.p_organizations
SET
  organization_id = $3
WHERE portfolio_id = $1 AND organization_id = $2
RETURNING id, portfolio_id, organization_id
`

type UpdatePOrganizationParams struct {
	PortfolioID      string      `json:"portfolio_id"`
	OrganizationID   pgtype.Text `json:"organization_id"`
	OrganizationID_2 pgtype.Text `json:"organization_id_2"`
}

func (q *Queries) UpdatePOrganization(ctx context.Context, arg UpdatePOrganizationParams) (HamonixBusinessPOrganization, error) {
	row := q.db.QueryRow(ctx, updatePOrganization, arg.PortfolioID, arg.OrganizationID, arg.OrganizationID_2)
	var i HamonixBusinessPOrganization
	err := row.Scan(&i.ID, &i.PortfolioID, &i.OrganizationID)
	return i, err
}

const updatePortfolio = `-- name: UpdatePortfolio :one
UPDATE hamonix_business.portfolios
SET
  name = $2,
  privacy = $3
WHERE id = $1
RETURNING id, name, privacy, author_id, created_at, updated_at
`

type UpdatePortfolioParams struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Privacy string `json:"privacy"`
}

func (q *Queries) UpdatePortfolio(ctx context.Context, arg UpdatePortfolioParams) (HamonixBusinessPortfolio, error) {
	row := q.db.QueryRow(ctx, updatePortfolio, arg.ID, arg.Name, arg.Privacy)
	var i HamonixBusinessPortfolio
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Privacy,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
