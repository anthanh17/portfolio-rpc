// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: category.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPortfolioCategory = `-- name: CreatePortfolioCategory :one
INSERT INTO hamonix_business.portfolio_categories (
    id,
  name,
  description
) VALUES (
  $1, $2, $3
) RETURNING id, name, description, created_at, updated_at
`

type CreatePortfolioCategoryParams struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreatePortfolioCategory(ctx context.Context, arg CreatePortfolioCategoryParams) (HamonixBusinessPortfolioCategory, error) {
	row := q.db.QueryRow(ctx, createPortfolioCategory, arg.ID, arg.Name, arg.Description)
	var i HamonixBusinessPortfolioCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePortfolioCategory = `-- name: DeletePortfolioCategory :exec
DELETE FROM hamonix_business.portfolio_categories
WHERE id = $1
`

func (q *Queries) DeletePortfolioCategory(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deletePortfolioCategory, id)
	return err
}

const getPCategoryByCategoryId = `-- name: GetPCategoryByCategoryId :many
SELECT portfolio_id, category_id FROM hamonix_business.p_categories
WHERE category_id = $1
`

func (q *Queries) GetPCategoryByCategoryId(ctx context.Context, categoryID pgtype.Text) ([]HamonixBusinessPCategory, error) {
	rows, err := q.db.Query(ctx, getPCategoryByCategoryId, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []HamonixBusinessPCategory{}
	for rows.Next() {
		var i HamonixBusinessPCategory
		if err := rows.Scan(&i.PortfolioID, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPortfolioCategoryById = `-- name: GetPortfolioCategoryById :one
SELECT id, name, description, created_at, updated_at FROM hamonix_business.portfolio_categories
WHERE id = $1
`

func (q *Queries) GetPortfolioCategoryById(ctx context.Context, id string) (HamonixBusinessPortfolioCategory, error) {
	row := q.db.QueryRow(ctx, getPortfolioCategoryById, id)
	var i HamonixBusinessPortfolioCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePortfolioCategory = `-- name: UpdatePortfolioCategory :one
UPDATE hamonix_business.portfolio_categories
SET name = $1, description = $2
WHERE id = $3 RETURNING id, name, description, created_at, updated_at
`

type UpdatePortfolioCategoryParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	ID          string      `json:"id"`
}

func (q *Queries) UpdatePortfolioCategory(ctx context.Context, arg UpdatePortfolioCategoryParams) (HamonixBusinessPortfolioCategory, error) {
	row := q.db.QueryRow(ctx, updatePortfolioCategory, arg.Name, arg.Description, arg.ID)
	var i HamonixBusinessPortfolioCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
