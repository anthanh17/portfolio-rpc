// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: rd-portfolio-rpc.proto

package rd_portfolio_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RdPortfolioRpc_Ping_FullMethodName                          = "/rd_portfolio_rpc.RdPortfolioRpc/Ping"
	RdPortfolioRpc_GetOpt_FullMethodName                        = "/rd_portfolio_rpc.RdPortfolioRpc/GetOpt"
	RdPortfolioRpc_CreateOpt_FullMethodName                     = "/rd_portfolio_rpc.RdPortfolioRpc/CreateOpt"
	RdPortfolioRpc_GetOpts_FullMethodName                       = "/rd_portfolio_rpc.RdPortfolioRpc/GetOpts"
	RdPortfolioRpc_CreatePortfolioProfile_FullMethodName        = "/rd_portfolio_rpc.RdPortfolioRpc/CreatePortfolioProfile"
	RdPortfolioRpc_UpdatePortfolioProfile_FullMethodName        = "/rd_portfolio_rpc.RdPortfolioRpc/UpdatePortfolioProfile"
	RdPortfolioRpc_DeletePortfolioProfile_FullMethodName        = "/rd_portfolio_rpc.RdPortfolioRpc/DeletePortfolioProfile"
	RdPortfolioRpc_GetProfileByUserID_FullMethodName            = "/rd_portfolio_rpc.RdPortfolioRpc/GetProfileByUserID"
	RdPortfolioRpc_GetDetailProfile_FullMethodName              = "/rd_portfolio_rpc.RdPortfolioRpc/GetDetailProfile"
	RdPortfolioRpc_LinkedProfileToListAccounts_FullMethodName   = "/rd_portfolio_rpc.RdPortfolioRpc/LinkedProfileToListAccounts"
	RdPortfolioRpc_UnLinkedProfileToListAccounts_FullMethodName = "/rd_portfolio_rpc.RdPortfolioRpc/UnLinkedProfileToListAccounts"
	RdPortfolioRpc_GetListLinkedProfileAccounts_FullMethodName  = "/rd_portfolio_rpc.RdPortfolioRpc/GetListLinkedProfileAccounts"
)

// RdPortfolioRpcClient is the client API for RdPortfolioRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RdPortfolioRpcClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Portfolio optimization
	GetOpt(ctx context.Context, in *GetPortfolioOptReq, opts ...grpc.CallOption) (*GetPortfolioOptRes, error)
	CreateOpt(ctx context.Context, in *CreatePortfolioOptReq, opts ...grpc.CallOption) (*CreatePortfolioOptRes, error)
	GetOpts(ctx context.Context, in *GetPortfolioOptsReq, opts ...grpc.CallOption) (*GetPortfolioOptsRes, error)
	CreatePortfolioProfile(ctx context.Context, in *CreatePortfolioProfileRequest, opts ...grpc.CallOption) (*CreatePortfolioProfileResponse, error)
	UpdatePortfolioProfile(ctx context.Context, in *UpdatePortfolioProfileRequest, opts ...grpc.CallOption) (*UpdatePortfolioProfileResponse, error)
	DeletePortfolioProfile(ctx context.Context, in *DeletePortfolioProfileRequest, opts ...grpc.CallOption) (*DeletePortfolioProfileResponse, error)
	GetProfileByUserID(ctx context.Context, in *GetProfileByUserIDRequest, opts ...grpc.CallOption) (*GetProfileByUserIDResponse, error)
	GetDetailProfile(ctx context.Context, in *GetDetailProfileRequest, opts ...grpc.CallOption) (*GetDetailProfileResponse, error)
	LinkedProfileToListAccounts(ctx context.Context, in *LinkedProfileToListAccountsRequest, opts ...grpc.CallOption) (*LinkedProfileToListAccountsResponse, error)
	UnLinkedProfileToListAccounts(ctx context.Context, in *UnLinkedProfileToListAccountsRequest, opts ...grpc.CallOption) (*UnLinkedProfileToListAccountsResponse, error)
	GetListLinkedProfileAccounts(ctx context.Context, in *GetListLinkedProfileAccountsRequest, opts ...grpc.CallOption) (*GetListLinkedProfileAccountsResponse, error)
}

type rdPortfolioRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRdPortfolioRpcClient(cc grpc.ClientConnInterface) RdPortfolioRpcClient {
	return &rdPortfolioRpcClient{cc}
}

func (c *rdPortfolioRpcClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, RdPortfolioRpc_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdPortfolioRpcClient) GetOpt(ctx context.Context, in *GetPortfolioOptReq, opts ...grpc.CallOption) (*GetPortfolioOptRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortfolioOptRes)
	err := c.cc.Invoke(ctx, RdPortfolioRpc_GetOpt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdPortfolioRpcClient) CreateOpt(ctx context.Context, in *CreatePortfolioOptReq, opts ...grpc.CallOption) (*CreatePortfolioOptRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePortfolioOptRes)
	err := c.cc.Invoke(ctx, RdPortfolioRpc_CreateOpt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdPortfolioRpcClient) GetOpts(ctx context.Context, in *GetPortfolioOptsReq, opts ...grpc.CallOption) (*GetPortfolioOptsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortfolioOptsRes)
	err := c.cc.Invoke(ctx, RdPortfolioRpc_GetOpts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdPortfolioRpcClient) CreatePortfolioProfile(ctx context.Context, in *CreatePortfolioProfileRequest, opts ...grpc.CallOption) (*CreatePortfolioProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePortfolioProfileResponse)
	err := c.cc.Invoke(ctx, RdPortfolioRpc_CreatePortfolioProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdPortfolioRpcClient) UpdatePortfolioProfile(ctx context.Context, in *UpdatePortfolioProfileRequest, opts ...grpc.CallOption) (*UpdatePortfolioProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePortfolioProfileResponse)
	err := c.cc.Invoke(ctx, RdPortfolioRpc_UpdatePortfolioProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdPortfolioRpcClient) DeletePortfolioProfile(ctx context.Context, in *DeletePortfolioProfileRequest, opts ...grpc.CallOption) (*DeletePortfolioProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePortfolioProfileResponse)
	err := c.cc.Invoke(ctx, RdPortfolioRpc_DeletePortfolioProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdPortfolioRpcClient) GetProfileByUserID(ctx context.Context, in *GetProfileByUserIDRequest, opts ...grpc.CallOption) (*GetProfileByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileByUserIDResponse)
	err := c.cc.Invoke(ctx, RdPortfolioRpc_GetProfileByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdPortfolioRpcClient) GetDetailProfile(ctx context.Context, in *GetDetailProfileRequest, opts ...grpc.CallOption) (*GetDetailProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailProfileResponse)
	err := c.cc.Invoke(ctx, RdPortfolioRpc_GetDetailProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdPortfolioRpcClient) LinkedProfileToListAccounts(ctx context.Context, in *LinkedProfileToListAccountsRequest, opts ...grpc.CallOption) (*LinkedProfileToListAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkedProfileToListAccountsResponse)
	err := c.cc.Invoke(ctx, RdPortfolioRpc_LinkedProfileToListAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdPortfolioRpcClient) UnLinkedProfileToListAccounts(ctx context.Context, in *UnLinkedProfileToListAccountsRequest, opts ...grpc.CallOption) (*UnLinkedProfileToListAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnLinkedProfileToListAccountsResponse)
	err := c.cc.Invoke(ctx, RdPortfolioRpc_UnLinkedProfileToListAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdPortfolioRpcClient) GetListLinkedProfileAccounts(ctx context.Context, in *GetListLinkedProfileAccountsRequest, opts ...grpc.CallOption) (*GetListLinkedProfileAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListLinkedProfileAccountsResponse)
	err := c.cc.Invoke(ctx, RdPortfolioRpc_GetListLinkedProfileAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RdPortfolioRpcServer is the server API for RdPortfolioRpc service.
// All implementations must embed UnimplementedRdPortfolioRpcServer
// for forward compatibility.
type RdPortfolioRpcServer interface {
	Ping(context.Context, *Request) (*Response, error)
	// Portfolio optimization
	GetOpt(context.Context, *GetPortfolioOptReq) (*GetPortfolioOptRes, error)
	CreateOpt(context.Context, *CreatePortfolioOptReq) (*CreatePortfolioOptRes, error)
	GetOpts(context.Context, *GetPortfolioOptsReq) (*GetPortfolioOptsRes, error)
	CreatePortfolioProfile(context.Context, *CreatePortfolioProfileRequest) (*CreatePortfolioProfileResponse, error)
	UpdatePortfolioProfile(context.Context, *UpdatePortfolioProfileRequest) (*UpdatePortfolioProfileResponse, error)
	DeletePortfolioProfile(context.Context, *DeletePortfolioProfileRequest) (*DeletePortfolioProfileResponse, error)
	GetProfileByUserID(context.Context, *GetProfileByUserIDRequest) (*GetProfileByUserIDResponse, error)
	GetDetailProfile(context.Context, *GetDetailProfileRequest) (*GetDetailProfileResponse, error)
	LinkedProfileToListAccounts(context.Context, *LinkedProfileToListAccountsRequest) (*LinkedProfileToListAccountsResponse, error)
	UnLinkedProfileToListAccounts(context.Context, *UnLinkedProfileToListAccountsRequest) (*UnLinkedProfileToListAccountsResponse, error)
	GetListLinkedProfileAccounts(context.Context, *GetListLinkedProfileAccountsRequest) (*GetListLinkedProfileAccountsResponse, error)
	mustEmbedUnimplementedRdPortfolioRpcServer()
}

// UnimplementedRdPortfolioRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRdPortfolioRpcServer struct{}

func (UnimplementedRdPortfolioRpcServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRdPortfolioRpcServer) GetOpt(context.Context, *GetPortfolioOptReq) (*GetPortfolioOptRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpt not implemented")
}
func (UnimplementedRdPortfolioRpcServer) CreateOpt(context.Context, *CreatePortfolioOptReq) (*CreatePortfolioOptRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOpt not implemented")
}
func (UnimplementedRdPortfolioRpcServer) GetOpts(context.Context, *GetPortfolioOptsReq) (*GetPortfolioOptsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpts not implemented")
}
func (UnimplementedRdPortfolioRpcServer) CreatePortfolioProfile(context.Context, *CreatePortfolioProfileRequest) (*CreatePortfolioProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortfolioProfile not implemented")
}
func (UnimplementedRdPortfolioRpcServer) UpdatePortfolioProfile(context.Context, *UpdatePortfolioProfileRequest) (*UpdatePortfolioProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePortfolioProfile not implemented")
}
func (UnimplementedRdPortfolioRpcServer) DeletePortfolioProfile(context.Context, *DeletePortfolioProfileRequest) (*DeletePortfolioProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePortfolioProfile not implemented")
}
func (UnimplementedRdPortfolioRpcServer) GetProfileByUserID(context.Context, *GetProfileByUserIDRequest) (*GetProfileByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByUserID not implemented")
}
func (UnimplementedRdPortfolioRpcServer) GetDetailProfile(context.Context, *GetDetailProfileRequest) (*GetDetailProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailProfile not implemented")
}
func (UnimplementedRdPortfolioRpcServer) LinkedProfileToListAccounts(context.Context, *LinkedProfileToListAccountsRequest) (*LinkedProfileToListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkedProfileToListAccounts not implemented")
}
func (UnimplementedRdPortfolioRpcServer) UnLinkedProfileToListAccounts(context.Context, *UnLinkedProfileToListAccountsRequest) (*UnLinkedProfileToListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLinkedProfileToListAccounts not implemented")
}
func (UnimplementedRdPortfolioRpcServer) GetListLinkedProfileAccounts(context.Context, *GetListLinkedProfileAccountsRequest) (*GetListLinkedProfileAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListLinkedProfileAccounts not implemented")
}
func (UnimplementedRdPortfolioRpcServer) mustEmbedUnimplementedRdPortfolioRpcServer() {}
func (UnimplementedRdPortfolioRpcServer) testEmbeddedByValue()                        {}

// UnsafeRdPortfolioRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RdPortfolioRpcServer will
// result in compilation errors.
type UnsafeRdPortfolioRpcServer interface {
	mustEmbedUnimplementedRdPortfolioRpcServer()
}

func RegisterRdPortfolioRpcServer(s grpc.ServiceRegistrar, srv RdPortfolioRpcServer) {
	// If the following call pancis, it indicates UnimplementedRdPortfolioRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RdPortfolioRpc_ServiceDesc, srv)
}

func _RdPortfolioRpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdPortfolioRpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdPortfolioRpc_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdPortfolioRpcServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdPortfolioRpc_GetOpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortfolioOptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdPortfolioRpcServer).GetOpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdPortfolioRpc_GetOpt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdPortfolioRpcServer).GetOpt(ctx, req.(*GetPortfolioOptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdPortfolioRpc_CreateOpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortfolioOptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdPortfolioRpcServer).CreateOpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdPortfolioRpc_CreateOpt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdPortfolioRpcServer).CreateOpt(ctx, req.(*CreatePortfolioOptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdPortfolioRpc_GetOpts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortfolioOptsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdPortfolioRpcServer).GetOpts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdPortfolioRpc_GetOpts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdPortfolioRpcServer).GetOpts(ctx, req.(*GetPortfolioOptsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdPortfolioRpc_CreatePortfolioProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortfolioProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdPortfolioRpcServer).CreatePortfolioProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdPortfolioRpc_CreatePortfolioProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdPortfolioRpcServer).CreatePortfolioProfile(ctx, req.(*CreatePortfolioProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdPortfolioRpc_UpdatePortfolioProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortfolioProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdPortfolioRpcServer).UpdatePortfolioProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdPortfolioRpc_UpdatePortfolioProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdPortfolioRpcServer).UpdatePortfolioProfile(ctx, req.(*UpdatePortfolioProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdPortfolioRpc_DeletePortfolioProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortfolioProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdPortfolioRpcServer).DeletePortfolioProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdPortfolioRpc_DeletePortfolioProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdPortfolioRpcServer).DeletePortfolioProfile(ctx, req.(*DeletePortfolioProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdPortfolioRpc_GetProfileByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdPortfolioRpcServer).GetProfileByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdPortfolioRpc_GetProfileByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdPortfolioRpcServer).GetProfileByUserID(ctx, req.(*GetProfileByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdPortfolioRpc_GetDetailProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdPortfolioRpcServer).GetDetailProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdPortfolioRpc_GetDetailProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdPortfolioRpcServer).GetDetailProfile(ctx, req.(*GetDetailProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdPortfolioRpc_LinkedProfileToListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkedProfileToListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdPortfolioRpcServer).LinkedProfileToListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdPortfolioRpc_LinkedProfileToListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdPortfolioRpcServer).LinkedProfileToListAccounts(ctx, req.(*LinkedProfileToListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdPortfolioRpc_UnLinkedProfileToListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLinkedProfileToListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdPortfolioRpcServer).UnLinkedProfileToListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdPortfolioRpc_UnLinkedProfileToListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdPortfolioRpcServer).UnLinkedProfileToListAccounts(ctx, req.(*UnLinkedProfileToListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdPortfolioRpc_GetListLinkedProfileAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListLinkedProfileAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdPortfolioRpcServer).GetListLinkedProfileAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RdPortfolioRpc_GetListLinkedProfileAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdPortfolioRpcServer).GetListLinkedProfileAccounts(ctx, req.(*GetListLinkedProfileAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RdPortfolioRpc_ServiceDesc is the grpc.ServiceDesc for RdPortfolioRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RdPortfolioRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rd_portfolio_rpc.RdPortfolioRpc",
	HandlerType: (*RdPortfolioRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _RdPortfolioRpc_Ping_Handler,
		},
		{
			MethodName: "GetOpt",
			Handler:    _RdPortfolioRpc_GetOpt_Handler,
		},
		{
			MethodName: "CreateOpt",
			Handler:    _RdPortfolioRpc_CreateOpt_Handler,
		},
		{
			MethodName: "GetOpts",
			Handler:    _RdPortfolioRpc_GetOpts_Handler,
		},
		{
			MethodName: "CreatePortfolioProfile",
			Handler:    _RdPortfolioRpc_CreatePortfolioProfile_Handler,
		},
		{
			MethodName: "UpdatePortfolioProfile",
			Handler:    _RdPortfolioRpc_UpdatePortfolioProfile_Handler,
		},
		{
			MethodName: "DeletePortfolioProfile",
			Handler:    _RdPortfolioRpc_DeletePortfolioProfile_Handler,
		},
		{
			MethodName: "GetProfileByUserID",
			Handler:    _RdPortfolioRpc_GetProfileByUserID_Handler,
		},
		{
			MethodName: "GetDetailProfile",
			Handler:    _RdPortfolioRpc_GetDetailProfile_Handler,
		},
		{
			MethodName: "LinkedProfileToListAccounts",
			Handler:    _RdPortfolioRpc_LinkedProfileToListAccounts_Handler,
		},
		{
			MethodName: "UnLinkedProfileToListAccounts",
			Handler:    _RdPortfolioRpc_UnLinkedProfileToListAccounts_Handler,
		},
		{
			MethodName: "GetListLinkedProfileAccounts",
			Handler:    _RdPortfolioRpc_GetListLinkedProfileAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rd-portfolio-rpc.proto",
}
