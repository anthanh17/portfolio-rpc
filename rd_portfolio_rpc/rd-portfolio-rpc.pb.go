// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: rd-portfolio-rpc.proto

package rd_portfolio_rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ping string `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetPing() string {
	if x != nil {
		return x.Ping
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type TickerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CompanyName string  `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	Allocation  float64 `protobuf:"fixed64,3,opt,name=allocation,proto3" json:"allocation,omitempty"`
}

func (x *TickerInfo) Reset() {
	*x = TickerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerInfo) ProtoMessage() {}

func (x *TickerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerInfo.ProtoReflect.Descriptor instead.
func (*TickerInfo) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *TickerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TickerInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *TickerInfo) GetAllocation() float64 {
	if x != nil {
		return x.Allocation
	}
	return 0
}

type Portfolio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickers           []*TickerInfo `protobuf:"bytes,1,rep,name=tickers,proto3" json:"tickers,omitempty"`
	ExpectedReturn    float64       `protobuf:"fixed64,2,opt,name=expected_return,json=expectedReturn,proto3" json:"expected_return,omitempty"`
	StandardDeviation float64       `protobuf:"fixed64,3,opt,name=standard_deviation,json=standardDeviation,proto3" json:"standard_deviation,omitempty"`
	SharpeRatio       float64       `protobuf:"fixed64,4,opt,name=sharpe_ratio,json=sharpeRatio,proto3" json:"sharpe_ratio,omitempty"`
}

func (x *Portfolio) Reset() {
	*x = Portfolio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Portfolio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Portfolio) ProtoMessage() {}

func (x *Portfolio) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Portfolio.ProtoReflect.Descriptor instead.
func (*Portfolio) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *Portfolio) GetTickers() []*TickerInfo {
	if x != nil {
		return x.Tickers
	}
	return nil
}

func (x *Portfolio) GetExpectedReturn() float64 {
	if x != nil {
		return x.ExpectedReturn
	}
	return 0
}

func (x *Portfolio) GetStandardDeviation() float64 {
	if x != nil {
		return x.StandardDeviation
	}
	return 0
}

func (x *Portfolio) GetSharpeRatio() float64 {
	if x != nil {
		return x.SharpeRatio
	}
	return 0
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []float64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *Value) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers []string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
	Values  []*Value `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *Row) GetHeaders() []string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Row) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset             string  `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	MinWeight         float64 `protobuf:"fixed64,2,opt,name=min_weight,json=minWeight,proto3" json:"min_weight,omitempty"`
	MaxWeight         float64 `protobuf:"fixed64,3,opt,name=max_weight,json=maxWeight,proto3" json:"max_weight,omitempty"`
	ExpectedReturn    float64 `protobuf:"fixed64,4,opt,name=expected_return,json=expectedReturn,proto3" json:"expected_return,omitempty"`
	StandardDeviation float64 `protobuf:"fixed64,5,opt,name=standard_deviation,json=standardDeviation,proto3" json:"standard_deviation,omitempty"`
	SharpeRatio       float64 `protobuf:"fixed64,6,opt,name=sharpe_ratio,json=sharpeRatio,proto3" json:"sharpe_ratio,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *Asset) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Asset) GetMinWeight() float64 {
	if x != nil {
		return x.MinWeight
	}
	return 0
}

func (x *Asset) GetMaxWeight() float64 {
	if x != nil {
		return x.MaxWeight
	}
	return 0
}

func (x *Asset) GetExpectedReturn() float64 {
	if x != nil {
		return x.ExpectedReturn
	}
	return 0
}

func (x *Asset) GetStandardDeviation() float64 {
	if x != nil {
		return x.StandardDeviation
	}
	return 0
}

func (x *Asset) GetSharpeRatio() float64 {
	if x != nil {
		return x.SharpeRatio
	}
	return 0
}

type GetPortfolioOptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoId   string `protobuf:"bytes,1,opt,name=po_id,json=poId,proto3" json:"po_id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetPortfolioOptReq) Reset() {
	*x = GetPortfolioOptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortfolioOptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortfolioOptReq) ProtoMessage() {}

func (x *GetPortfolioOptReq) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortfolioOptReq.ProtoReflect.Descriptor instead.
func (*GetPortfolioOptReq) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *GetPortfolioOptReq) GetPoId() string {
	if x != nil {
		return x.PoId
	}
	return ""
}

func (x *GetPortfolioOptReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CreatePortfolioOptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePortfolioOptReq) Reset() {
	*x = CreatePortfolioOptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortfolioOptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortfolioOptReq) ProtoMessage() {}

func (x *CreatePortfolioOptReq) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortfolioOptReq.ProtoReflect.Descriptor instead.
func (*CreatePortfolioOptReq) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{8}
}

type CreatePortfolioOptRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePortfolioOptRes) Reset() {
	*x = CreatePortfolioOptRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortfolioOptRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortfolioOptRes) ProtoMessage() {}

func (x *CreatePortfolioOptRes) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortfolioOptRes.ProtoReflect.Descriptor instead.
func (*CreatePortfolioOptRes) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{9}
}

type GetPortfolioOptsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPortfolioOptsReq) Reset() {
	*x = GetPortfolioOptsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortfolioOptsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortfolioOptsReq) ProtoMessage() {}

func (x *GetPortfolioOptsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortfolioOptsReq.ProtoReflect.Descriptor instead.
func (*GetPortfolioOptsReq) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{10}
}

type GetPortfolioOptsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPortfolioOptsRes) Reset() {
	*x = GetPortfolioOptsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortfolioOptsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortfolioOptsRes) ProtoMessage() {}

func (x *GetPortfolioOptsRes) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortfolioOptsRes.ProtoReflect.Descriptor instead.
func (*GetPortfolioOptsRes) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{11}
}

type GetPortfolioOptRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortfolioType           string     `protobuf:"bytes,1,opt,name=portfolio_type,json=portfolioType,proto3" json:"portfolio_type,omitempty"`
	ProvidedPortfolio       *Portfolio `protobuf:"bytes,2,opt,name=provided_portfolio,json=providedPortfolio,proto3,oneof" json:"provided_portfolio,omitempty"`
	MaxSharpeRatioPortfolio *Portfolio `protobuf:"bytes,3,opt,name=max_sharpe_ratio_portfolio,json=maxSharpeRatioPortfolio,proto3,oneof" json:"max_sharpe_ratio_portfolio,omitempty"`
	OptPortfolios           *Row       `protobuf:"bytes,4,opt,name=opt_portfolios,json=optPortfolios,proto3,oneof" json:"opt_portfolios,omitempty"`
	CorrMatrix              *Row       `protobuf:"bytes,5,opt,name=corr_matrix,json=corrMatrix,proto3,oneof" json:"corr_matrix,omitempty"`
	Cml                     *Row       `protobuf:"bytes,6,opt,name=cml,proto3,oneof" json:"cml,omitempty"`
	Assets                  []*Asset   `protobuf:"bytes,7,rep,name=assets,proto3" json:"assets,omitempty"`
	Portfolios              *Row       `protobuf:"bytes,8,opt,name=portfolios,proto3,oneof" json:"portfolios,omitempty"`
	UserId                  string     `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetPortfolioOptRes) Reset() {
	*x = GetPortfolioOptRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortfolioOptRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortfolioOptRes) ProtoMessage() {}

func (x *GetPortfolioOptRes) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortfolioOptRes.ProtoReflect.Descriptor instead.
func (*GetPortfolioOptRes) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *GetPortfolioOptRes) GetPortfolioType() string {
	if x != nil {
		return x.PortfolioType
	}
	return ""
}

func (x *GetPortfolioOptRes) GetProvidedPortfolio() *Portfolio {
	if x != nil {
		return x.ProvidedPortfolio
	}
	return nil
}

func (x *GetPortfolioOptRes) GetMaxSharpeRatioPortfolio() *Portfolio {
	if x != nil {
		return x.MaxSharpeRatioPortfolio
	}
	return nil
}

func (x *GetPortfolioOptRes) GetOptPortfolios() *Row {
	if x != nil {
		return x.OptPortfolios
	}
	return nil
}

func (x *GetPortfolioOptRes) GetCorrMatrix() *Row {
	if x != nil {
		return x.CorrMatrix
	}
	return nil
}

func (x *GetPortfolioOptRes) GetCml() *Row {
	if x != nil {
		return x.Cml
	}
	return nil
}

func (x *GetPortfolioOptRes) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *GetPortfolioOptRes) GetPortfolios() *Row {
	if x != nil {
		return x.Portfolios
	}
	return nil
}

func (x *GetPortfolioOptRes) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type PortfolioAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TickerId   int64   `protobuf:"varint,1,opt,name=ticker_id,json=tickerId,proto3" json:"ticker_id,omitempty"`
	Allocation float64 `protobuf:"fixed64,2,opt,name=allocation,proto3" json:"allocation,omitempty"`
	Price      float64 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *PortfolioAsset) Reset() {
	*x = PortfolioAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioAsset) ProtoMessage() {}

func (x *PortfolioAsset) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioAsset.ProtoReflect.Descriptor instead.
func (*PortfolioAsset) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *PortfolioAsset) GetTickerId() int64 {
	if x != nil {
		return x.TickerId
	}
	return 0
}

func (x *PortfolioAsset) GetAllocation() float64 {
	if x != nil {
		return x.Allocation
	}
	return 0
}

func (x *PortfolioAsset) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type CreatePortfolioProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId     string            `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Name           string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationId []string          `protobuf:"bytes,3,rep,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	BranchId       []string          `protobuf:"bytes,4,rep,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	AdvisorId      []string          `protobuf:"bytes,5,rep,name=advisor_id,json=advisorId,proto3" json:"advisor_id,omitempty"`
	Assets         []*PortfolioAsset `protobuf:"bytes,6,rep,name=assets,proto3" json:"assets,omitempty"`
	Privacy        string            `protobuf:"bytes,7,opt,name=privacy,proto3" json:"privacy,omitempty"`
	AuthorId       string            `protobuf:"bytes,8,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	UserId         string            `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CreatePortfolioProfileRequest) Reset() {
	*x = CreatePortfolioProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortfolioProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortfolioProfileRequest) ProtoMessage() {}

func (x *CreatePortfolioProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortfolioProfileRequest.ProtoReflect.Descriptor instead.
func (*CreatePortfolioProfileRequest) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *CreatePortfolioProfileRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *CreatePortfolioProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePortfolioProfileRequest) GetOrganizationId() []string {
	if x != nil {
		return x.OrganizationId
	}
	return nil
}

func (x *CreatePortfolioProfileRequest) GetBranchId() []string {
	if x != nil {
		return x.BranchId
	}
	return nil
}

func (x *CreatePortfolioProfileRequest) GetAdvisorId() []string {
	if x != nil {
		return x.AdvisorId
	}
	return nil
}

func (x *CreatePortfolioProfileRequest) GetAssets() []*PortfolioAsset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *CreatePortfolioProfileRequest) GetPrivacy() string {
	if x != nil {
		return x.Privacy
	}
	return ""
}

func (x *CreatePortfolioProfileRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *CreatePortfolioProfileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CreatePortfolioProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreatePortfolioProfileResponse) Reset() {
	*x = CreatePortfolioProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortfolioProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortfolioProfileResponse) ProtoMessage() {}

func (x *CreatePortfolioProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortfolioProfileResponse.ProtoReflect.Descriptor instead.
func (*CreatePortfolioProfileResponse) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *CreatePortfolioProfileResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type UpdatePortfolioProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileId      string            `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	CategoryId     string            `protobuf:"bytes,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Name           string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationId []string          `protobuf:"bytes,4,rep,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	BranchId       []string          `protobuf:"bytes,5,rep,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	AdvisorId      []string          `protobuf:"bytes,6,rep,name=advisor_id,json=advisorId,proto3" json:"advisor_id,omitempty"`
	Assets         []*PortfolioAsset `protobuf:"bytes,7,rep,name=assets,proto3" json:"assets,omitempty"`
	Privacy        string            `protobuf:"bytes,8,opt,name=privacy,proto3" json:"privacy,omitempty"`
}

func (x *UpdatePortfolioProfileRequest) Reset() {
	*x = UpdatePortfolioProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePortfolioProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePortfolioProfileRequest) ProtoMessage() {}

func (x *UpdatePortfolioProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePortfolioProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdatePortfolioProfileRequest) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *UpdatePortfolioProfileRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *UpdatePortfolioProfileRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *UpdatePortfolioProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePortfolioProfileRequest) GetOrganizationId() []string {
	if x != nil {
		return x.OrganizationId
	}
	return nil
}

func (x *UpdatePortfolioProfileRequest) GetBranchId() []string {
	if x != nil {
		return x.BranchId
	}
	return nil
}

func (x *UpdatePortfolioProfileRequest) GetAdvisorId() []string {
	if x != nil {
		return x.AdvisorId
	}
	return nil
}

func (x *UpdatePortfolioProfileRequest) GetAssets() []*PortfolioAsset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *UpdatePortfolioProfileRequest) GetPrivacy() string {
	if x != nil {
		return x.Privacy
	}
	return ""
}

type UpdatePortfolioProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdatePortfolioProfileResponse) Reset() {
	*x = UpdatePortfolioProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePortfolioProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePortfolioProfileResponse) ProtoMessage() {}

func (x *UpdatePortfolioProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePortfolioProfileResponse.ProtoReflect.Descriptor instead.
func (*UpdatePortfolioProfileResponse) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *UpdatePortfolioProfileResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type DeletePortfolioProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *DeletePortfolioProfileRequest) Reset() {
	*x = DeletePortfolioProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePortfolioProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePortfolioProfileRequest) ProtoMessage() {}

func (x *DeletePortfolioProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePortfolioProfileRequest.ProtoReflect.Descriptor instead.
func (*DeletePortfolioProfileRequest) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *DeletePortfolioProfileRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type DeletePortfolioProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeletePortfolioProfileResponse) Reset() {
	*x = DeletePortfolioProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePortfolioProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePortfolioProfileResponse) ProtoMessage() {}

func (x *DeletePortfolioProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePortfolioProfileResponse.ProtoReflect.Descriptor instead.
func (*DeletePortfolioProfileResponse) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *DeletePortfolioProfileResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type GetBranchByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBranchByIDRequest) Reset() {
	*x = GetBranchByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchByIDRequest) ProtoMessage() {}

func (x *GetBranchByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchByIDRequest.ProtoReflect.Descriptor instead.
func (*GetBranchByIDRequest) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *GetBranchByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetBranchByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code        string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *GetBranchByIDResponse) Reset() {
	*x = GetBranchByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchByIDResponse) ProtoMessage() {}

func (x *GetBranchByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchByIDResponse.ProtoReflect.Descriptor instead.
func (*GetBranchByIDResponse) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *GetBranchByIDResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetBranchByIDResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetBranchByIDResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetOrganizationByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrganizationByIDRequest) Reset() {
	*x = GetOrganizationByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationByIDRequest) ProtoMessage() {}

func (x *GetOrganizationByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationByIDRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationByIDRequest) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *GetOrganizationByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOrganizationByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code         string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	BackofficeId string `protobuf:"bytes,3,opt,name=backoffice_id,json=backofficeId,proto3" json:"backoffice_id,omitempty"`
	Description  string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *GetOrganizationByIDResponse) Reset() {
	*x = GetOrganizationByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationByIDResponse) ProtoMessage() {}

func (x *GetOrganizationByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationByIDResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationByIDResponse) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{23}
}

func (x *GetOrganizationByIDResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetOrganizationByIDResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetOrganizationByIDResponse) GetBackofficeId() string {
	if x != nil {
		return x.BackofficeId
	}
	return ""
}

func (x *GetOrganizationByIDResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetAdvisorByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAdvisorByIDRequest) Reset() {
	*x = GetAdvisorByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdvisorByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdvisorByIDRequest) ProtoMessage() {}

func (x *GetAdvisorByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdvisorByIDRequest.ProtoReflect.Descriptor instead.
func (*GetAdvisorByIDRequest) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{24}
}

func (x *GetAdvisorByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAdvisorByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code        string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *GetAdvisorByIDResponse) Reset() {
	*x = GetAdvisorByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdvisorByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdvisorByIDResponse) ProtoMessage() {}

func (x *GetAdvisorByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdvisorByIDResponse.ProtoReflect.Descriptor instead.
func (*GetAdvisorByIDResponse) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{25}
}

func (x *GetAdvisorByIDResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetAdvisorByIDResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetAdvisorByIDResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetProfileByUserIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetProfileByUserIDRequest) Reset() {
	*x = GetProfileByUserIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileByUserIDRequest) ProtoMessage() {}

func (x *GetProfileByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileByUserIDRequest.ProtoReflect.Descriptor instead.
func (*GetProfileByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{26}
}

func (x *GetProfileByUserIDRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetProfileByUserIDRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type TProfileValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers []string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
	Values  []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TProfileValue) Reset() {
	*x = TProfileValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TProfileValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TProfileValue) ProtoMessage() {}

func (x *TProfileValue) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TProfileValue.ProtoReflect.Descriptor instead.
func (*TProfileValue) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{27}
}

func (x *TProfileValue) GetHeaders() []string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TProfileValue) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type Author struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Author) Reset() {
	*x = Author{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Author) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Author) ProtoMessage() {}

func (x *Author) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Author.ProtoReflect.Descriptor instead.
func (*Author) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{28}
}

func (x *Author) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Author) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Charts      *TProfileValue `protobuf:"bytes,3,opt,name=charts,proto3" json:"charts,omitempty"`
	Privacy     string         `protobuf:"bytes,4,opt,name=privacy,proto3" json:"privacy,omitempty"`
	Author      *Author        `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	TotalReturn uint64         `protobuf:"varint,6,opt,name=total_return,json=totalReturn,proto3" json:"total_return,omitempty"`
	UpdatedAt   uint64         `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt   uint64         `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *TProfile) Reset() {
	*x = TProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TProfile) ProtoMessage() {}

func (x *TProfile) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TProfile.ProtoReflect.Descriptor instead.
func (*TProfile) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{29}
}

func (x *TProfile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TProfile) GetCharts() *TProfileValue {
	if x != nil {
		return x.Charts
	}
	return nil
}

func (x *TProfile) GetPrivacy() string {
	if x != nil {
		return x.Privacy
	}
	return ""
}

func (x *TProfile) GetAuthor() *Author {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *TProfile) GetTotalReturn() uint64 {
	if x != nil {
		return x.TotalReturn
	}
	return 0
}

func (x *TProfile) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TProfile) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type GetProfileByUserIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*TProfile `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Current uint64      `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	Total   uint64      `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetProfileByUserIDResponse) Reset() {
	*x = GetProfileByUserIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileByUserIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileByUserIDResponse) ProtoMessage() {}

func (x *GetProfileByUserIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileByUserIDResponse.ProtoReflect.Descriptor instead.
func (*GetProfileByUserIDResponse) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{30}
}

func (x *GetProfileByUserIDResponse) GetData() []*TProfile {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetProfileByUserIDResponse) GetCurrent() uint64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *GetProfileByUserIDResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CreateCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProfileIds []string `protobuf:"bytes,3,rep,name=profile_ids,json=profileIds,proto3" json:"profile_ids,omitempty"`
}

func (x *CreateCategoryRequest) Reset() {
	*x = CreateCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryRequest) ProtoMessage() {}

func (x *CreateCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryRequest.ProtoReflect.Descriptor instead.
func (*CreateCategoryRequest) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{31}
}

func (x *CreateCategoryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateCategoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCategoryRequest) GetProfileIds() []string {
	if x != nil {
		return x.ProfileIds
	}
	return nil
}

type CreateCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *CreateCategoryResponse) Reset() {
	*x = CreateCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryResponse) ProtoMessage() {}

func (x *CreateCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryResponse.ProtoReflect.Descriptor instead.
func (*CreateCategoryResponse) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{32}
}

func (x *CreateCategoryResponse) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

type UpdateCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId string   `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProfileIds []string `protobuf:"bytes,3,rep,name=profile_ids,json=profileIds,proto3" json:"profile_ids,omitempty"`
}

func (x *UpdateCategoryRequest) Reset() {
	*x = UpdateCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCategoryRequest) ProtoMessage() {}

func (x *UpdateCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCategoryRequest.ProtoReflect.Descriptor instead.
func (*UpdateCategoryRequest) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateCategoryRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *UpdateCategoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCategoryRequest) GetProfileIds() []string {
	if x != nil {
		return x.ProfileIds
	}
	return nil
}

type UpdateCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProfileIds []string `protobuf:"bytes,2,rep,name=profile_ids,json=profileIds,proto3" json:"profile_ids,omitempty"`
}

func (x *UpdateCategoryResponse) Reset() {
	*x = UpdateCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCategoryResponse) ProtoMessage() {}

func (x *UpdateCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCategoryResponse.ProtoReflect.Descriptor instead.
func (*UpdateCategoryResponse) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateCategoryResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCategoryResponse) GetProfileIds() []string {
	if x != nil {
		return x.ProfileIds
	}
	return nil
}

type DeleteCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCategoryRequest) Reset() {
	*x = DeleteCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryRequest) ProtoMessage() {}

func (x *DeleteCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryRequest.ProtoReflect.Descriptor instead.
func (*DeleteCategoryRequest) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteCategoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteCategoryResponse) Reset() {
	*x = DeleteCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryResponse) ProtoMessage() {}

func (x *DeleteCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryResponse.ProtoReflect.Descriptor instead.
func (*DeleteCategoryResponse) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteCategoryResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type GetCategoryByUserIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page     uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetCategoryByUserIDRequest) Reset() {
	*x = GetCategoryByUserIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryByUserIDRequest) ProtoMessage() {}

func (x *GetCategoryByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryByUserIDRequest.ProtoReflect.Descriptor instead.
func (*GetCategoryByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{37}
}

func (x *GetCategoryByUserIDRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetCategoryByUserIDRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetCategoryByUserIDRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type CategoryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NumberProfile uint64 `protobuf:"varint,3,opt,name=number_profile,json=numberProfile,proto3" json:"number_profile,omitempty"`
	CreatedAt     uint64 `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     uint64 `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CategoryData) Reset() {
	*x = CategoryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryData) ProtoMessage() {}

func (x *CategoryData) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryData.ProtoReflect.Descriptor instead.
func (*CategoryData) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{38}
}

func (x *CategoryData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CategoryData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryData) GetNumberProfile() uint64 {
	if x != nil {
		return x.NumberProfile
	}
	return 0
}

func (x *CategoryData) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CategoryData) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type GetCategoryByUserIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []*CategoryData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Current uint64          `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	Total   uint64          `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetCategoryByUserIDResponse) Reset() {
	*x = GetCategoryByUserIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryByUserIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryByUserIDResponse) ProtoMessage() {}

func (x *GetCategoryByUserIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryByUserIDResponse.ProtoReflect.Descriptor instead.
func (*GetCategoryByUserIDResponse) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{39}
}

func (x *GetCategoryByUserIDResponse) GetData() []*CategoryData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetCategoryByUserIDResponse) GetCurrent() uint64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *GetCategoryByUserIDResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type RemovePortfolioProfileInCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategogyId string `protobuf:"bytes,1,opt,name=categogy_id,json=categogyId,proto3" json:"categogy_id,omitempty"`
	ProfileId  string `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *RemovePortfolioProfileInCategoryRequest) Reset() {
	*x = RemovePortfolioProfileInCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePortfolioProfileInCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePortfolioProfileInCategoryRequest) ProtoMessage() {}

func (x *RemovePortfolioProfileInCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePortfolioProfileInCategoryRequest.ProtoReflect.Descriptor instead.
func (*RemovePortfolioProfileInCategoryRequest) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{40}
}

func (x *RemovePortfolioProfileInCategoryRequest) GetCategogyId() string {
	if x != nil {
		return x.CategogyId
	}
	return ""
}

func (x *RemovePortfolioProfileInCategoryRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type RemovePortfolioProfileInCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RemovePortfolioProfileInCategoryResponse) Reset() {
	*x = RemovePortfolioProfileInCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePortfolioProfileInCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePortfolioProfileInCategoryResponse) ProtoMessage() {}

func (x *RemovePortfolioProfileInCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePortfolioProfileInCategoryResponse.ProtoReflect.Descriptor instead.
func (*RemovePortfolioProfileInCategoryResponse) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{41}
}

func (x *RemovePortfolioProfileInCategoryResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type GetDetailCategogyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategogyId string `protobuf:"bytes,1,opt,name=categogy_id,json=categogyId,proto3" json:"categogy_id,omitempty"`
	Page       uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   uint64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetDetailCategogyRequest) Reset() {
	*x = GetDetailCategogyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailCategogyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailCategogyRequest) ProtoMessage() {}

func (x *GetDetailCategogyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailCategogyRequest.ProtoReflect.Descriptor instead.
func (*GetDetailCategogyRequest) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{42}
}

func (x *GetDetailCategogyRequest) GetCategogyId() string {
	if x != nil {
		return x.CategogyId
	}
	return ""
}

func (x *GetDetailCategogyRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetDetailCategogyRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TCProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Charts      *TProfileValue `protobuf:"bytes,3,opt,name=charts,proto3" json:"charts,omitempty"`
	Privacy     string         `protobuf:"bytes,4,opt,name=privacy,proto3" json:"privacy,omitempty"`
	AuthorId    string         `protobuf:"bytes,5,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	TotalReturn uint64         `protobuf:"varint,6,opt,name=total_return,json=totalReturn,proto3" json:"total_return,omitempty"`
	CreatedAt   uint64         `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   uint64         `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *TCProfile) Reset() {
	*x = TCProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCProfile) ProtoMessage() {}

func (x *TCProfile) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCProfile.ProtoReflect.Descriptor instead.
func (*TCProfile) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{43}
}

func (x *TCProfile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TCProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TCProfile) GetCharts() *TProfileValue {
	if x != nil {
		return x.Charts
	}
	return nil
}

func (x *TCProfile) GetPrivacy() string {
	if x != nil {
		return x.Privacy
	}
	return ""
}

func (x *TCProfile) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *TCProfile) GetTotalReturn() uint64 {
	if x != nil {
		return x.TotalReturn
	}
	return 0
}

func (x *TCProfile) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TCProfile) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type GetDetailCategogyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Profiles []*TCProfile `protobuf:"bytes,3,rep,name=profiles,proto3" json:"profiles,omitempty"`
	Current  uint64       `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`
	Total    uint64       `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetDetailCategogyResponse) Reset() {
	*x = GetDetailCategogyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rd_portfolio_rpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDetailCategogyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDetailCategogyResponse) ProtoMessage() {}

func (x *GetDetailCategogyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rd_portfolio_rpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDetailCategogyResponse.ProtoReflect.Descriptor instead.
func (*GetDetailCategogyResponse) Descriptor() ([]byte, []int) {
	return file_rd_portfolio_rpc_proto_rawDescGZIP(), []int{44}
}

func (x *GetDetailCategogyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDetailCategogyResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDetailCategogyResponse) GetProfiles() []*TCProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *GetDetailCategogyResponse) GetCurrent() uint64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *GetDetailCategogyResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_rd_portfolio_rpc_proto protoreflect.FileDescriptor

var file_rd_portfolio_rpc_proto_rawDesc = []byte{
	0x0a, 0x16, 0x72, 0x64, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x2d, 0x72,
	0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x22, 0x1d, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x1e, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x63, 0x0a, 0x0a, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbe,
	0x01, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x12, 0x36, 0x0a, 0x07,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2d, 0x0a,
	0x12, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22,
	0x1f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x50, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x2f, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72,
	0x70, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x42, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x17, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x71, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x8f, 0x05, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x4f, 0x70, 0x74, 0x52, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x64, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x5d,
	0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x48,
	0x01, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x53, 0x68, 0x61, 0x72, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a,
	0x0e, 0x6f, 0x70, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x48, 0x02, 0x52, 0x0d,
	0x6f, 0x70, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x48, 0x03, 0x52, 0x0a,
	0x63, 0x6f, 0x72, 0x72, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x03, 0x63, 0x6d, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x64, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f,
	0x77, 0x48, 0x04, 0x52, 0x03, 0x63, 0x6d, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x06, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x6f, 0x77, 0x48, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x70, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x6f, 0x72, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63,
	0x6d, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x73, 0x22, 0x63, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xac, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x22, 0x38, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x3e, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x38, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x2c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x5e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x41, 0x0a,
	0x0d, 0x54, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x2c, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x94,
	0x02, 0x0a, 0x08, 0x54, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x7c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x65, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x73, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x66,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x81, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x69, 0x0a, 0x27, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x67, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x42, 0x0a, 0x28, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x6c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x67, 0x79, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x80, 0x02, 0x0a, 0x09, 0x54, 0x43, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x43, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32,
	0xc7, 0x0e, 0x0a, 0x0e, 0x52, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52,
	0x70, 0x63, 0x12, 0x3d, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x2e, 0x72, 0x64, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x12, 0x24, 0x2e, 0x72, 0x64,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x24, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x74, 0x12, 0x27, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x4f, 0x70, 0x74, 0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x73, 0x12, 0x25, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x7d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x2e, 0x72, 0x64, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x64, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x64, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79, 0x49, 0x44, 0x12, 0x26, 0x2e,
	0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x74, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2c, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x2b, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x27, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x64,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x72, 0x64, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x27, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x64, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x2e, 0x72,
	0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x72, 0x64, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x20,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x39, 0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x72, 0x64,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x67, 0x79, 0x12, 0x2a,
	0x2e, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x72, 0x64, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x67, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2f, 0x72,
	0x64, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x2d, 0x72, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rd_portfolio_rpc_proto_rawDescOnce sync.Once
	file_rd_portfolio_rpc_proto_rawDescData = file_rd_portfolio_rpc_proto_rawDesc
)

func file_rd_portfolio_rpc_proto_rawDescGZIP() []byte {
	file_rd_portfolio_rpc_proto_rawDescOnce.Do(func() {
		file_rd_portfolio_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rd_portfolio_rpc_proto_rawDescData)
	})
	return file_rd_portfolio_rpc_proto_rawDescData
}

var file_rd_portfolio_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_rd_portfolio_rpc_proto_goTypes = []any{
	(*Request)(nil),                                  // 0: rd_portfolio_rpc.Request
	(*Response)(nil),                                 // 1: rd_portfolio_rpc.Response
	(*TickerInfo)(nil),                               // 2: rd_portfolio_rpc.TickerInfo
	(*Portfolio)(nil),                                // 3: rd_portfolio_rpc.Portfolio
	(*Value)(nil),                                    // 4: rd_portfolio_rpc.Value
	(*Row)(nil),                                      // 5: rd_portfolio_rpc.Row
	(*Asset)(nil),                                    // 6: rd_portfolio_rpc.Asset
	(*GetPortfolioOptReq)(nil),                       // 7: rd_portfolio_rpc.GetPortfolioOptReq
	(*CreatePortfolioOptReq)(nil),                    // 8: rd_portfolio_rpc.CreatePortfolioOptReq
	(*CreatePortfolioOptRes)(nil),                    // 9: rd_portfolio_rpc.CreatePortfolioOptRes
	(*GetPortfolioOptsReq)(nil),                      // 10: rd_portfolio_rpc.GetPortfolioOptsReq
	(*GetPortfolioOptsRes)(nil),                      // 11: rd_portfolio_rpc.GetPortfolioOptsRes
	(*GetPortfolioOptRes)(nil),                       // 12: rd_portfolio_rpc.GetPortfolioOptRes
	(*PortfolioAsset)(nil),                           // 13: rd_portfolio_rpc.PortfolioAsset
	(*CreatePortfolioProfileRequest)(nil),            // 14: rd_portfolio_rpc.CreatePortfolioProfileRequest
	(*CreatePortfolioProfileResponse)(nil),           // 15: rd_portfolio_rpc.CreatePortfolioProfileResponse
	(*UpdatePortfolioProfileRequest)(nil),            // 16: rd_portfolio_rpc.UpdatePortfolioProfileRequest
	(*UpdatePortfolioProfileResponse)(nil),           // 17: rd_portfolio_rpc.UpdatePortfolioProfileResponse
	(*DeletePortfolioProfileRequest)(nil),            // 18: rd_portfolio_rpc.DeletePortfolioProfileRequest
	(*DeletePortfolioProfileResponse)(nil),           // 19: rd_portfolio_rpc.DeletePortfolioProfileResponse
	(*GetBranchByIDRequest)(nil),                     // 20: rd_portfolio_rpc.GetBranchByIDRequest
	(*GetBranchByIDResponse)(nil),                    // 21: rd_portfolio_rpc.GetBranchByIDResponse
	(*GetOrganizationByIDRequest)(nil),               // 22: rd_portfolio_rpc.GetOrganizationByIDRequest
	(*GetOrganizationByIDResponse)(nil),              // 23: rd_portfolio_rpc.GetOrganizationByIDResponse
	(*GetAdvisorByIDRequest)(nil),                    // 24: rd_portfolio_rpc.GetAdvisorByIDRequest
	(*GetAdvisorByIDResponse)(nil),                   // 25: rd_portfolio_rpc.GetAdvisorByIDResponse
	(*GetProfileByUserIDRequest)(nil),                // 26: rd_portfolio_rpc.GetProfileByUserIDRequest
	(*TProfileValue)(nil),                            // 27: rd_portfolio_rpc.TProfileValue
	(*Author)(nil),                                   // 28: rd_portfolio_rpc.Author
	(*TProfile)(nil),                                 // 29: rd_portfolio_rpc.TProfile
	(*GetProfileByUserIDResponse)(nil),               // 30: rd_portfolio_rpc.GetProfileByUserIDResponse
	(*CreateCategoryRequest)(nil),                    // 31: rd_portfolio_rpc.CreateCategoryRequest
	(*CreateCategoryResponse)(nil),                   // 32: rd_portfolio_rpc.CreateCategoryResponse
	(*UpdateCategoryRequest)(nil),                    // 33: rd_portfolio_rpc.UpdateCategoryRequest
	(*UpdateCategoryResponse)(nil),                   // 34: rd_portfolio_rpc.UpdateCategoryResponse
	(*DeleteCategoryRequest)(nil),                    // 35: rd_portfolio_rpc.DeleteCategoryRequest
	(*DeleteCategoryResponse)(nil),                   // 36: rd_portfolio_rpc.DeleteCategoryResponse
	(*GetCategoryByUserIDRequest)(nil),               // 37: rd_portfolio_rpc.GetCategoryByUserIDRequest
	(*CategoryData)(nil),                             // 38: rd_portfolio_rpc.CategoryData
	(*GetCategoryByUserIDResponse)(nil),              // 39: rd_portfolio_rpc.GetCategoryByUserIDResponse
	(*RemovePortfolioProfileInCategoryRequest)(nil),  // 40: rd_portfolio_rpc.RemovePortfolioProfileInCategoryRequest
	(*RemovePortfolioProfileInCategoryResponse)(nil), // 41: rd_portfolio_rpc.RemovePortfolioProfileInCategoryResponse
	(*GetDetailCategogyRequest)(nil),                 // 42: rd_portfolio_rpc.GetDetailCategogyRequest
	(*TCProfile)(nil),                                // 43: rd_portfolio_rpc.TCProfile
	(*GetDetailCategogyResponse)(nil),                // 44: rd_portfolio_rpc.GetDetailCategogyResponse
}
var file_rd_portfolio_rpc_proto_depIdxs = []int32{
	2,  // 0: rd_portfolio_rpc.Portfolio.tickers:type_name -> rd_portfolio_rpc.TickerInfo
	4,  // 1: rd_portfolio_rpc.Row.values:type_name -> rd_portfolio_rpc.Value
	3,  // 2: rd_portfolio_rpc.GetPortfolioOptRes.provided_portfolio:type_name -> rd_portfolio_rpc.Portfolio
	3,  // 3: rd_portfolio_rpc.GetPortfolioOptRes.max_sharpe_ratio_portfolio:type_name -> rd_portfolio_rpc.Portfolio
	5,  // 4: rd_portfolio_rpc.GetPortfolioOptRes.opt_portfolios:type_name -> rd_portfolio_rpc.Row
	5,  // 5: rd_portfolio_rpc.GetPortfolioOptRes.corr_matrix:type_name -> rd_portfolio_rpc.Row
	5,  // 6: rd_portfolio_rpc.GetPortfolioOptRes.cml:type_name -> rd_portfolio_rpc.Row
	6,  // 7: rd_portfolio_rpc.GetPortfolioOptRes.assets:type_name -> rd_portfolio_rpc.Asset
	5,  // 8: rd_portfolio_rpc.GetPortfolioOptRes.portfolios:type_name -> rd_portfolio_rpc.Row
	13, // 9: rd_portfolio_rpc.CreatePortfolioProfileRequest.assets:type_name -> rd_portfolio_rpc.PortfolioAsset
	13, // 10: rd_portfolio_rpc.UpdatePortfolioProfileRequest.assets:type_name -> rd_portfolio_rpc.PortfolioAsset
	27, // 11: rd_portfolio_rpc.TProfile.charts:type_name -> rd_portfolio_rpc.TProfileValue
	28, // 12: rd_portfolio_rpc.TProfile.author:type_name -> rd_portfolio_rpc.Author
	29, // 13: rd_portfolio_rpc.GetProfileByUserIDResponse.data:type_name -> rd_portfolio_rpc.TProfile
	38, // 14: rd_portfolio_rpc.GetCategoryByUserIDResponse.data:type_name -> rd_portfolio_rpc.CategoryData
	27, // 15: rd_portfolio_rpc.TCProfile.charts:type_name -> rd_portfolio_rpc.TProfileValue
	43, // 16: rd_portfolio_rpc.GetDetailCategogyResponse.profiles:type_name -> rd_portfolio_rpc.TCProfile
	0,  // 17: rd_portfolio_rpc.RdPortfolioRpc.Ping:input_type -> rd_portfolio_rpc.Request
	7,  // 18: rd_portfolio_rpc.RdPortfolioRpc.GetOpt:input_type -> rd_portfolio_rpc.GetPortfolioOptReq
	8,  // 19: rd_portfolio_rpc.RdPortfolioRpc.CreateOpt:input_type -> rd_portfolio_rpc.CreatePortfolioOptReq
	10, // 20: rd_portfolio_rpc.RdPortfolioRpc.GetOpts:input_type -> rd_portfolio_rpc.GetPortfolioOptsReq
	14, // 21: rd_portfolio_rpc.RdPortfolioRpc.CreatePortfolioProfile:input_type -> rd_portfolio_rpc.CreatePortfolioProfileRequest
	16, // 22: rd_portfolio_rpc.RdPortfolioRpc.UpdatePortfolioProfile:input_type -> rd_portfolio_rpc.UpdatePortfolioProfileRequest
	18, // 23: rd_portfolio_rpc.RdPortfolioRpc.DeletePortfolioProfile:input_type -> rd_portfolio_rpc.DeletePortfolioProfileRequest
	20, // 24: rd_portfolio_rpc.RdPortfolioRpc.GetBranchByID:input_type -> rd_portfolio_rpc.GetBranchByIDRequest
	22, // 25: rd_portfolio_rpc.RdPortfolioRpc.GetOrganizationByID:input_type -> rd_portfolio_rpc.GetOrganizationByIDRequest
	24, // 26: rd_portfolio_rpc.RdPortfolioRpc.GetAdvisorByID:input_type -> rd_portfolio_rpc.GetAdvisorByIDRequest
	26, // 27: rd_portfolio_rpc.RdPortfolioRpc.GetProfileByUserID:input_type -> rd_portfolio_rpc.GetProfileByUserIDRequest
	31, // 28: rd_portfolio_rpc.RdPortfolioRpc.CreateCategory:input_type -> rd_portfolio_rpc.CreateCategoryRequest
	33, // 29: rd_portfolio_rpc.RdPortfolioRpc.UpdateCategory:input_type -> rd_portfolio_rpc.UpdateCategoryRequest
	35, // 30: rd_portfolio_rpc.RdPortfolioRpc.DeleteCategory:input_type -> rd_portfolio_rpc.DeleteCategoryRequest
	37, // 31: rd_portfolio_rpc.RdPortfolioRpc.GetCategoryByUserID:input_type -> rd_portfolio_rpc.GetCategoryByUserIDRequest
	40, // 32: rd_portfolio_rpc.RdPortfolioRpc.RemovePortfolioProfileInCategory:input_type -> rd_portfolio_rpc.RemovePortfolioProfileInCategoryRequest
	42, // 33: rd_portfolio_rpc.RdPortfolioRpc.GetDetailCategogy:input_type -> rd_portfolio_rpc.GetDetailCategogyRequest
	1,  // 34: rd_portfolio_rpc.RdPortfolioRpc.Ping:output_type -> rd_portfolio_rpc.Response
	12, // 35: rd_portfolio_rpc.RdPortfolioRpc.GetOpt:output_type -> rd_portfolio_rpc.GetPortfolioOptRes
	9,  // 36: rd_portfolio_rpc.RdPortfolioRpc.CreateOpt:output_type -> rd_portfolio_rpc.CreatePortfolioOptRes
	11, // 37: rd_portfolio_rpc.RdPortfolioRpc.GetOpts:output_type -> rd_portfolio_rpc.GetPortfolioOptsRes
	15, // 38: rd_portfolio_rpc.RdPortfolioRpc.CreatePortfolioProfile:output_type -> rd_portfolio_rpc.CreatePortfolioProfileResponse
	17, // 39: rd_portfolio_rpc.RdPortfolioRpc.UpdatePortfolioProfile:output_type -> rd_portfolio_rpc.UpdatePortfolioProfileResponse
	19, // 40: rd_portfolio_rpc.RdPortfolioRpc.DeletePortfolioProfile:output_type -> rd_portfolio_rpc.DeletePortfolioProfileResponse
	21, // 41: rd_portfolio_rpc.RdPortfolioRpc.GetBranchByID:output_type -> rd_portfolio_rpc.GetBranchByIDResponse
	23, // 42: rd_portfolio_rpc.RdPortfolioRpc.GetOrganizationByID:output_type -> rd_portfolio_rpc.GetOrganizationByIDResponse
	25, // 43: rd_portfolio_rpc.RdPortfolioRpc.GetAdvisorByID:output_type -> rd_portfolio_rpc.GetAdvisorByIDResponse
	30, // 44: rd_portfolio_rpc.RdPortfolioRpc.GetProfileByUserID:output_type -> rd_portfolio_rpc.GetProfileByUserIDResponse
	32, // 45: rd_portfolio_rpc.RdPortfolioRpc.CreateCategory:output_type -> rd_portfolio_rpc.CreateCategoryResponse
	34, // 46: rd_portfolio_rpc.RdPortfolioRpc.UpdateCategory:output_type -> rd_portfolio_rpc.UpdateCategoryResponse
	36, // 47: rd_portfolio_rpc.RdPortfolioRpc.DeleteCategory:output_type -> rd_portfolio_rpc.DeleteCategoryResponse
	39, // 48: rd_portfolio_rpc.RdPortfolioRpc.GetCategoryByUserID:output_type -> rd_portfolio_rpc.GetCategoryByUserIDResponse
	41, // 49: rd_portfolio_rpc.RdPortfolioRpc.RemovePortfolioProfileInCategory:output_type -> rd_portfolio_rpc.RemovePortfolioProfileInCategoryResponse
	44, // 50: rd_portfolio_rpc.RdPortfolioRpc.GetDetailCategogy:output_type -> rd_portfolio_rpc.GetDetailCategogyResponse
	34, // [34:51] is the sub-list for method output_type
	17, // [17:34] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_rd_portfolio_rpc_proto_init() }
func file_rd_portfolio_rpc_proto_init() {
	if File_rd_portfolio_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rd_portfolio_rpc_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TickerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Portfolio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetPortfolioOptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePortfolioOptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePortfolioOptRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetPortfolioOptsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetPortfolioOptsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetPortfolioOptRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PortfolioAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePortfolioProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePortfolioProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePortfolioProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePortfolioProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePortfolioProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePortfolioProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GetBranchByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GetBranchByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrganizationByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrganizationByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*GetAdvisorByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetAdvisorByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetProfileByUserIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*TProfileValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*Author); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*TProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GetProfileByUserIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CreateCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CreateCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*GetCategoryByUserIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CategoryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*GetCategoryByUserIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*RemovePortfolioProfileInCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*RemovePortfolioProfileInCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*GetDetailCategogyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*TCProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rd_portfolio_rpc_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*GetDetailCategogyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rd_portfolio_rpc_proto_msgTypes[12].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rd_portfolio_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rd_portfolio_rpc_proto_goTypes,
		DependencyIndexes: file_rd_portfolio_rpc_proto_depIdxs,
		MessageInfos:      file_rd_portfolio_rpc_proto_msgTypes,
	}.Build()
	File_rd_portfolio_rpc_proto = out.File
	file_rd_portfolio_rpc_proto_rawDesc = nil
	file_rd_portfolio_rpc_proto_goTypes = nil
	file_rd_portfolio_rpc_proto_depIdxs = nil
}
